/* tslint:disable */
/* eslint-disable */
/**
 * Payroll SMB REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Accounting
 */
export interface Accounting {
    /**
     * 
     * @type {number}
     * @memberof Accounting
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Accounting
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Accounting
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface AuthDto
 */
export interface AuthDto {
    /**
     * 
     * @type {string}
     * @memberof AuthDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthDto
     */
    'password': string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthDto
     */
    'rememberMe': boolean;
}
/**
 * 
 * @export
 * @interface AvailableAccessDto
 */
export interface AvailableAccessDto {
    /**
     * 
     * @type {string}
     * @memberof AvailableAccessDto
     */
    'roleType': string;
    /**
     * 
     * @type {string}
     * @memberof AvailableAccessDto
     */
    'resourceType': string;
    /**
     * 
     * @type {string}
     * @memberof AvailableAccessDto
     */
    'accessType': string;
}
/**
 * 
 * @export
 * @interface AvailableAccessUserCompanyDto
 */
export interface AvailableAccessUserCompanyDto {
    /**
     * 
     * @type {number}
     * @memberof AvailableAccessUserCompanyDto
     */
    'userId': number;
    /**
     * 
     * @type {number}
     * @memberof AvailableAccessUserCompanyDto
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof AvailableAccessUserCompanyDto
     */
    'resourceType': string;
    /**
     * 
     * @type {string}
     * @memberof AvailableAccessUserCompanyDto
     */
    'accessType': string;
}
/**
 * 
 * @export
 * @interface AvailableAccessUserDto
 */
export interface AvailableAccessUserDto {
    /**
     * 
     * @type {number}
     * @memberof AvailableAccessUserDto
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof AvailableAccessUserDto
     */
    'resourceType': string;
    /**
     * 
     * @type {string}
     * @memberof AvailableAccessUserDto
     */
    'accessType': string;
}
/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'taxId': string;
    /**
     * 
     * @type {Law}
     * @memberof Company
     */
    'law'?: Law;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    'lawId': number;
    /**
     * 
     * @type {Accounting}
     * @memberof Company
     */
    'accounting'?: Accounting;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    'accountingId': number;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'paymentSchedule': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'dateTo': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'payPeriod': string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    'checkDate': string;
    /**
     * 
     * @type {Array<Department>}
     * @memberof Company
     */
    'departments'?: Array<Department>;
    /**
     * 
     * @type {Array<Position>}
     * @memberof Company
     */
    'positions'?: Array<Position>;
    /**
     * 
     * @type {Array<UserCompany>}
     * @memberof Company
     */
    'users'?: Array<UserCompany>;
}
/**
 * 
 * @export
 * @interface CreateAccessDto
 */
export interface CreateAccessDto {
    /**
     * 
     * @type {string}
     * @memberof CreateAccessDto
     */
    'roleType': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccessDto
     */
    'resourceType': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccessDto
     */
    'accessType': string;
}
/**
 * 
 * @export
 * @interface CreateCompanyDto
 */
export interface CreateCompanyDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CreateCompanyDto
     */
    'lawId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyDto
     */
    'taxId': string;
    /**
     * 
     * @type {number}
     * @memberof CreateCompanyDto
     */
    'accountingId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyDto
     */
    'paymentSchedule': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyDto
     */
    'dateTo': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyDto
     */
    'payPeriod': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyDto
     */
    'checkDate': string;
}
/**
 * 
 * @export
 * @interface CreateDepartmentDto
 */
export interface CreateDepartmentDto {
    /**
     * 
     * @type {number}
     * @memberof CreateDepartmentDto
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateDepartmentDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDepartmentDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDepartmentDto
     */
    'dateTo': string;
    /**
     * 
     * @type {object}
     * @memberof CreateDepartmentDto
     */
    'parent': object;
}
/**
 * 
 * @export
 * @interface CreateJobDto
 */
export interface CreateJobDto {
    /**
     * 
     * @type {string}
     * @memberof CreateJobDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateMinWageDto
 */
export interface CreateMinWageDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMinWageDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMinWageDto
     */
    'dateTo': string;
    /**
     * 
     * @type {number}
     * @memberof CreateMinWageDto
     */
    'paySum': number;
}
/**
 * 
 * @export
 * @interface CreatePayFundDto
 */
export interface CreatePayFundDto {
    /**
     * 
     * @type {number}
     * @memberof CreatePayFundDto
     */
    'positionId': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePayFundDto
     */
    'payPeriod': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePayFundDto
     */
    'accPeriod': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePayFundDto
     */
    'payFundTypeId': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePayFundDto
     */
    'payFundCategory': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePayFundDto
     */
    'incomeSum': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayFundDto
     */
    'baseSum': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayFundDto
     */
    'rate': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayFundDto
     */
    'paySum': number;
}
/**
 * 
 * @export
 * @interface CreatePayFundTypeDto
 */
export interface CreatePayFundTypeDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePayFundTypeDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePayFundTypeDto
     */
    'group': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePayFundTypeDto
     */
    'calcMethod': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePayFundTypeDto
     */
    'sequence': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePayFundTypeDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreatePayPeriodDto
 */
export interface CreatePayPeriodDto {
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePayPeriodDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePayPeriodDto
     */
    'dateTo': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePayPeriodDto
     */
    'state': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'inBalance'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'inCompanyDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'inEmployeeDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'accruals'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'deductions'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'basic'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'adjustments'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'bonuses'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'vacations'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'sicks'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'refunds'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'other_accruals'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'taxes'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'payments'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'other_deductions'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'outBalance'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'outCompanyDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'outEmployeeDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayPeriodDto
     */
    'funds'?: number;
}
/**
 * 
 * @export
 * @interface CreatePaymentDto
 */
export interface CreatePaymentDto {
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentDto
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentDto
     */
    'payPeriod': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentDto
     */
    'accPeriod': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentDto
     */
    'docNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentDto
     */
    'docDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentDto
     */
    'paymentTypeId': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentDto
     */
    'baseSum'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentDto
     */
    'deductions'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentDto
     */
    'paySum'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentDto
     */
    'funds'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentDto
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentDto
     */
    'recordFlags'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentDto
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CreatePaymentPositionDto
 */
export interface CreatePaymentPositionDto {
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentPositionDto
     */
    'paymentId': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentPositionDto
     */
    'positionId': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentPositionDto
     */
    'baseSum': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentPositionDto
     */
    'deductions': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentPositionDto
     */
    'paySum': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentPositionDto
     */
    'funds': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePaymentPositionDto
     */
    'recordFlags': number;
}
/**
 * 
 * @export
 * @interface CreatePaymentTypeDto
 */
export interface CreatePaymentTypeDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentTypeDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentTypeDto
     */
    'paymentPart': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentTypeDto
     */
    'paymentGroup': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentTypeDto
     */
    'calcMethod': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePaymentTypeDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreatePayrollDto
 */
export interface CreatePayrollDto {
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'positionId': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePayrollDto
     */
    'payPeriod': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePayrollDto
     */
    'accPeriod': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'paymentTypeId': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePayrollDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePayrollDto
     */
    'dateTo': string;
    /**
     * 
     * @type {object}
     * @memberof CreatePayrollDto
     */
    'sourceType'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof CreatePayrollDto
     */
    'sourceId'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof CreatePayrollDto
     */
    'dateBegin'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof CreatePayrollDto
     */
    'dateEnd'?: object | null;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'planDays'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'planHours'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'planSum'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'rate'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'factDays'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'factHours'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'factSum': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'mask1'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'mask2'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'recordFlags': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePayrollDto
     */
    'fixedFlags'?: number;
    /**
     * 
     * @type {object}
     * @memberof CreatePayrollDto
     */
    'planHoursByDay'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof CreatePayrollDto
     */
    'factHoursByDay'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof CreatePayrollDto
     */
    'parentId'?: object | null;
}
/**
 * 
 * @export
 * @interface CreatePersonDto
 */
export interface CreatePersonDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'taxId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'sex'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePersonDto
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface CreatePositionDto
 */
export interface CreatePositionDto {
    /**
     * 
     * @type {number}
     * @memberof CreatePositionDto
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePositionDto
     */
    'cardNumber': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePositionDto
     */
    'sequenceNumber': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePositionDto
     */
    'description': string;
    /**
     * 
     * @type {object}
     * @memberof CreatePositionDto
     */
    'personId': object | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePositionDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePositionDto
     */
    'dateTo': string;
}
/**
 * 
 * @export
 * @interface CreatePositionHistoryDto
 */
export interface CreatePositionHistoryDto {
    /**
     * 
     * @type {number}
     * @memberof CreatePositionHistoryDto
     */
    'positionId': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePositionHistoryDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePositionHistoryDto
     */
    'dateTo': string;
    /**
     * 
     * @type {object}
     * @memberof CreatePositionHistoryDto
     */
    'departmentId'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof CreatePositionHistoryDto
     */
    'jobId': object | null;
    /**
     * 
     * @type {number}
     * @memberof CreatePositionHistoryDto
     */
    'workNormId': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePositionHistoryDto
     */
    'paymentTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePositionHistoryDto
     */
    'wage': number;
    /**
     * 
     * @type {number}
     * @memberof CreatePositionHistoryDto
     */
    'rate': number;
}
/**
 * 
 * @export
 * @interface CreateRoleDto
 */
export interface CreateRoleDto {
    /**
     * 
     * @type {string}
     * @memberof CreateRoleDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateRoleDto
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface CreateTaskDto
 */
export interface CreateTaskDto {
    /**
     * 
     * @type {number}
     * @memberof CreateTaskDto
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskDto
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskDto
     */
    'dateTo': string;
    /**
     * 
     * @type {number}
     * @memberof CreateTaskDto
     */
    'sequenceNumber': number;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskDto
     */
    'status': string;
    /**
     * 
     * @type {object}
     * @memberof CreateTaskDto
     */
    'entityId': object | null;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof CreateUserDto
     */
    'roleId': number;
}
/**
 * 
 * @export
 * @interface CreateWorkNormDto
 */
export interface CreateWorkNormDto {
    /**
     * 
     * @type {number}
     * @memberof CreateWorkNormDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkNormDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkNormDto
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkNormDto
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkNormDto
     */
    'dateTo': string;
}
/**
 * 
 * @export
 * @interface Department
 */
export interface Department {
    /**
     * 
     * @type {number}
     * @memberof Department
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'name': string;
    /**
     * 
     * @type {Company}
     * @memberof Department
     */
    'company'?: Company;
    /**
     * 
     * @type {number}
     * @memberof Department
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'dateTo': string;
    /**
     * 
     * @type {Department}
     * @memberof Department
     */
    'parentDepartment'?: Department | null;
    /**
     * 
     * @type {number}
     * @memberof Department
     */
    'parentDepartmentId'?: number | null;
    /**
     * 
     * @type {Array<Department>}
     * @memberof Department
     */
    'childDepartments'?: Array<Department>;
}
/**
 * 
 * @export
 * @interface FindAllPositionBalanceDto
 */
export interface FindAllPositionBalanceDto {
    /**
     * 
     * @type {number}
     * @memberof FindAllPositionBalanceDto
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof FindAllPositionBalanceDto
     */
    'payPeriod'?: string;
}
/**
 * 
 * @export
 * @interface FindPayFundDto
 */
export interface FindPayFundDto {
    /**
     * 
     * @type {number}
     * @memberof FindPayFundDto
     */
    'companyId'?: number;
    /**
     * 
     * @type {number}
     * @memberof FindPayFundDto
     */
    'positionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof FindPayFundDto
     */
    'payPeriod'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FindPayFundDto
     */
    'relations'?: boolean;
}
/**
 * 
 * @export
 * @interface FindPaymentDto
 */
export interface FindPaymentDto {
    /**
     * 
     * @type {number}
     * @memberof FindPaymentDto
     */
    'companyId': number;
    /**
     * 
     * @type {number}
     * @memberof FindPaymentDto
     */
    'positionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof FindPaymentDto
     */
    'payPeriod'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPaymentDto
     */
    'accPeriod'?: string;
    /**
     * 
     * @type {number}
     * @memberof FindPaymentDto
     */
    'paymentTypeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof FindPaymentDto
     */
    'status'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FindPaymentDto
     */
    'relations'?: boolean;
}
/**
 * 
 * @export
 * @interface FindPaymentPositionDto
 */
export interface FindPaymentPositionDto {
    /**
     * 
     * @type {number}
     * @memberof FindPaymentPositionDto
     */
    'paymentId': number;
    /**
     * 
     * @type {boolean}
     * @memberof FindPaymentPositionDto
     */
    'relations'?: boolean;
}
/**
 * 
 * @export
 * @interface FindPayrollDto
 */
export interface FindPayrollDto {
    /**
     * 
     * @type {number}
     * @memberof FindPayrollDto
     */
    'companyId'?: number;
    /**
     * 
     * @type {number}
     * @memberof FindPayrollDto
     */
    'positionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof FindPayrollDto
     */
    'payPeriod'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FindPayrollDto
     */
    'relations'?: boolean;
}
/**
 * 
 * @export
 * @interface FindPersonDto
 */
export interface FindPersonDto {
    /**
     * 
     * @type {string}
     * @memberof FindPersonDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPersonDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPersonDto
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPersonDto
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPersonDto
     */
    'taxId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPersonDto
     */
    'sex'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPersonDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPersonDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPersonDto
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface FindPositionDto
 */
export interface FindPositionDto {
    /**
     * 
     * @type {number}
     * @memberof FindPositionDto
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof FindPositionDto
     */
    'onDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPositionDto
     */
    'onPayPeriodDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FindPositionDto
     */
    'relations'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FindPositionDto
     */
    'employeesOnly'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FindPositionDto
     */
    'vacanciesOnly'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FindPositionDto
     */
    'dismissedOnly'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FindPositionDto
     */
    'deletedOnly'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FindPositionDto
     */
    'includeDeleted'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FindPositionDto
     */
    'id'?: number;
    /**
     * 
     * @type {Company}
     * @memberof FindPositionDto
     */
    'company'?: Company;
    /**
     * 
     * @type {string}
     * @memberof FindPositionDto
     */
    'cardNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof FindPositionDto
     */
    'sequenceNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof FindPositionDto
     */
    'description'?: string;
    /**
     * 
     * @type {Person}
     * @memberof FindPositionDto
     */
    'person'?: Person;
    /**
     * 
     * @type {number}
     * @memberof FindPositionDto
     */
    'personId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof FindPositionDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPositionDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {Array<PositionHistory>}
     * @memberof FindPositionDto
     */
    'history'?: Array<PositionHistory>;
    /**
     * 
     * @type {Array<PositionBalance>}
     * @memberof FindPositionDto
     */
    'balance'?: Array<PositionBalance>;
}
/**
 * 
 * @export
 * @interface FindPositionHistoryDto
 */
export interface FindPositionHistoryDto {
    /**
     * 
     * @type {number}
     * @memberof FindPositionHistoryDto
     */
    'positionId': number;
    /**
     * 
     * @type {string}
     * @memberof FindPositionHistoryDto
     */
    'onDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindPositionHistoryDto
     */
    'onPayPeriodDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FindPositionHistoryDto
     */
    'relations'?: boolean;
}
/**
 * 
 * @export
 * @interface FindTaskDto
 */
export interface FindTaskDto {
    /**
     * 
     * @type {number}
     * @memberof FindTaskDto
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof FindTaskDto
     */
    'onDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindTaskDto
     */
    'onPayPeriodDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FindTaskDto
     */
    'relations'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FindTaskDto
     */
    'id'?: number;
    /**
     * 
     * @type {Company}
     * @memberof FindTaskDto
     */
    'company'?: Company;
    /**
     * 
     * @type {string}
     * @memberof FindTaskDto
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindTaskDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindTaskDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {number}
     * @memberof FindTaskDto
     */
    'sequenceNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof FindTaskDto
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof FindTaskDto
     */
    'entityId'?: number | null;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Law
 */
export interface Law {
    /**
     * 
     * @type {number}
     * @memberof Law
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Law
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Law
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface MinWage
 */
export interface MinWage {
    /**
     * 
     * @type {number}
     * @memberof MinWage
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MinWage
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof MinWage
     */
    'dateTo': string;
    /**
     * 
     * @type {number}
     * @memberof MinWage
     */
    'paySum': number;
}
/**
 * 
 * @export
 * @interface PayFund
 */
export interface PayFund {
    /**
     * 
     * @type {number}
     * @memberof PayFund
     */
    'id': number;
    /**
     * 
     * @type {Position}
     * @memberof PayFund
     */
    'position'?: Position;
    /**
     * 
     * @type {number}
     * @memberof PayFund
     */
    'positionId': number;
    /**
     * 
     * @type {string}
     * @memberof PayFund
     */
    'payPeriod': string;
    /**
     * 
     * @type {string}
     * @memberof PayFund
     */
    'accPeriod': string;
    /**
     * 
     * @type {PayFundType}
     * @memberof PayFund
     */
    'payFundType'?: PayFundType;
    /**
     * 
     * @type {number}
     * @memberof PayFund
     */
    'payFundTypeId': number;
    /**
     * 
     * @type {string}
     * @memberof PayFund
     */
    'payFundCategory': string;
    /**
     * 
     * @type {number}
     * @memberof PayFund
     */
    'incomeSum': number;
    /**
     * 
     * @type {number}
     * @memberof PayFund
     */
    'baseSum': number;
    /**
     * 
     * @type {number}
     * @memberof PayFund
     */
    'rate': number;
    /**
     * 
     * @type {number}
     * @memberof PayFund
     */
    'paySum': number;
}
/**
 * 
 * @export
 * @interface PayFundType
 */
export interface PayFundType {
    /**
     * 
     * @type {number}
     * @memberof PayFundType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PayFundType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PayFundType
     */
    'group': string;
    /**
     * 
     * @type {string}
     * @memberof PayFundType
     */
    'calcMethod': string;
    /**
     * 
     * @type {number}
     * @memberof PayFundType
     */
    'sequence': number;
    /**
     * 
     * @type {string}
     * @memberof PayFundType
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface PayPeriod
 */
export interface PayPeriod {
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'id': number;
    /**
     * 
     * @type {Company}
     * @memberof PayPeriod
     */
    'company'?: Company;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof PayPeriod
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof PayPeriod
     */
    'dateTo': string;
    /**
     * 
     * @type {string}
     * @memberof PayPeriod
     */
    'state': string;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'inBalance': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'inCompanyDebt': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'inEmployeeDebt': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'accruals': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'deductions': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'basic': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'adjustments': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'bonuses': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'vacations': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'sicks': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'refunds': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'other_accruals': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'taxes': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'payments': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'other_deductions': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'outBalance': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'outCompanyDebt': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'outEmployeeDebt': number;
    /**
     * 
     * @type {number}
     * @memberof PayPeriod
     */
    'funds': number;
    /**
     * 
     * @type {Array<PayPeriodCalcMethod>}
     * @memberof PayPeriod
     */
    'calcMethods'?: Array<PayPeriodCalcMethod>;
}
/**
 * 
 * @export
 * @interface PayPeriodCalcMethod
 */
export interface PayPeriodCalcMethod {
    /**
     * 
     * @type {number}
     * @memberof PayPeriodCalcMethod
     */
    'id': number;
    /**
     * 
     * @type {PayPeriod}
     * @memberof PayPeriodCalcMethod
     */
    'payPeriod'?: PayPeriod;
    /**
     * 
     * @type {number}
     * @memberof PayPeriodCalcMethod
     */
    'payPeriodId': number;
    /**
     * 
     * @type {string}
     * @memberof PayPeriodCalcMethod
     */
    'calcMethod': string;
    /**
     * 
     * @type {number}
     * @memberof PayPeriodCalcMethod
     */
    'factSum': number;
}
/**
 * 
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'id': number;
    /**
     * 
     * @type {Company}
     * @memberof Payment
     */
    'company'?: Company;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'payPeriod': string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'accPeriod': string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'docNumber': string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'docDate': string;
    /**
     * 
     * @type {PaymentType}
     * @memberof Payment
     */
    'paymentType'?: PaymentType;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'paymentTypeId': number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'dateTo': string;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'baseSum': number;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'deductions': number;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'paySum': number;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'funds': number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'recordFlags': number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'description': string;
    /**
     * 
     * @type {Array<PaymentPosition>}
     * @memberof Payment
     */
    'paymentPositions'?: Array<PaymentPosition>;
}
/**
 * 
 * @export
 * @interface PaymentPosition
 */
export interface PaymentPosition {
    /**
     * 
     * @type {number}
     * @memberof PaymentPosition
     */
    'id': number;
    /**
     * 
     * @type {Payment}
     * @memberof PaymentPosition
     */
    'payment'?: Payment;
    /**
     * 
     * @type {number}
     * @memberof PaymentPosition
     */
    'paymentId': number;
    /**
     * 
     * @type {Position}
     * @memberof PaymentPosition
     */
    'position'?: Position;
    /**
     * 
     * @type {number}
     * @memberof PaymentPosition
     */
    'positionId': number;
    /**
     * 
     * @type {number}
     * @memberof PaymentPosition
     */
    'baseSum': number;
    /**
     * 
     * @type {number}
     * @memberof PaymentPosition
     */
    'deductions': number;
    /**
     * 
     * @type {number}
     * @memberof PaymentPosition
     */
    'paySum': number;
    /**
     * 
     * @type {number}
     * @memberof PaymentPosition
     */
    'funds': number;
    /**
     * 
     * @type {number}
     * @memberof PaymentPosition
     */
    'recordFlags': number;
}
/**
 * 
 * @export
 * @interface PaymentType
 */
export interface PaymentType {
    /**
     * 
     * @type {number}
     * @memberof PaymentType
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PaymentType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentType
     */
    'paymentPart': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentType
     */
    'paymentGroup': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentType
     */
    'calcMethod': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentType
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface Payroll
 */
export interface Payroll {
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'id': number;
    /**
     * 
     * @type {Position}
     * @memberof Payroll
     */
    'position'?: Position;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'positionId': number;
    /**
     * 
     * @type {string}
     * @memberof Payroll
     */
    'payPeriod': string;
    /**
     * 
     * @type {string}
     * @memberof Payroll
     */
    'accPeriod': string;
    /**
     * 
     * @type {PaymentType}
     * @memberof Payroll
     */
    'paymentType'?: PaymentType;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'paymentTypeId': number;
    /**
     * 
     * @type {string}
     * @memberof Payroll
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof Payroll
     */
    'dateTo': string;
    /**
     * 
     * @type {string}
     * @memberof Payroll
     */
    'sourceType': string | null;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'sourceId': number | null;
    /**
     * 
     * @type {string}
     * @memberof Payroll
     */
    'dateBegin': string | null;
    /**
     * 
     * @type {string}
     * @memberof Payroll
     */
    'dateEnd': string | null;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'planDays': number;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'planHours': number;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'planSum': number;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'rate': number;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'factDays': number;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'factHours': number;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'factSum': number;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'mask1': number;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'mask2': number;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'recordFlags': number;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'fixedFlags': number;
    /**
     * 
     * @type {object}
     * @memberof Payroll
     */
    'planHoursByDay': object | null;
    /**
     * 
     * @type {object}
     * @memberof Payroll
     */
    'factHoursByDay': object | null;
    /**
     * 
     * @type {number}
     * @memberof Payroll
     */
    'parentId': number | null;
}
/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {number}
     * @memberof Person
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'middleName': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'birthday': string | null;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'taxId': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'sex': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'photo': string;
    /**
     * 
     * @type {Array<Position>}
     * @memberof Person
     */
    'positions'?: Array<Position>;
}
/**
 * 
 * @export
 * @interface Position
 */
export interface Position {
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    'id': number;
    /**
     * 
     * @type {Company}
     * @memberof Position
     */
    'company'?: Company;
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof Position
     */
    'cardNumber': string;
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    'sequenceNumber': number;
    /**
     * 
     * @type {string}
     * @memberof Position
     */
    'description': string;
    /**
     * 
     * @type {Person}
     * @memberof Position
     */
    'person'?: Person;
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    'personId': number | null;
    /**
     * 
     * @type {string}
     * @memberof Position
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof Position
     */
    'dateTo': string;
    /**
     * 
     * @type {Array<PositionHistory>}
     * @memberof Position
     */
    'history'?: Array<PositionHistory>;
    /**
     * 
     * @type {Array<PositionBalance>}
     * @memberof Position
     */
    'balance'?: Array<PositionBalance>;
}
/**
 * 
 * @export
 * @interface PositionBalance
 */
export interface PositionBalance {
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'id': number;
    /**
     * 
     * @type {Position}
     * @memberof PositionBalance
     */
    'position'?: Position;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'positionId': number;
    /**
     * 
     * @type {string}
     * @memberof PositionBalance
     */
    'payPeriod': string;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'inBalance'?: number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'planDays': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'planHours': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'factDays': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'factHours': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'accruals': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'deductions': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'basic': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'adjustments': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'bonuses': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'vacations': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'sicks': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'refunds': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'other_accruals': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'taxes': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'payments': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'other_deductions': number;
    /**
     * 
     * @type {number}
     * @memberof PositionBalance
     */
    'outBalance': number;
}
/**
 * 
 * @export
 * @interface PositionHistory
 */
export interface PositionHistory {
    /**
     * 
     * @type {number}
     * @memberof PositionHistory
     */
    'id': number;
    /**
     * 
     * @type {Position}
     * @memberof PositionHistory
     */
    'position'?: Position;
    /**
     * 
     * @type {number}
     * @memberof PositionHistory
     */
    'positionId': number;
    /**
     * 
     * @type {string}
     * @memberof PositionHistory
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof PositionHistory
     */
    'dateTo': string;
    /**
     * 
     * @type {Department}
     * @memberof PositionHistory
     */
    'department'?: Department;
    /**
     * 
     * @type {number}
     * @memberof PositionHistory
     */
    'departmentId': number | null;
    /**
     * 
     * @type {Job}
     * @memberof PositionHistory
     */
    'job'?: Job;
    /**
     * 
     * @type {number}
     * @memberof PositionHistory
     */
    'jobId': number | null;
    /**
     * 
     * @type {WorkNorm}
     * @memberof PositionHistory
     */
    'workNorm'?: WorkNorm;
    /**
     * 
     * @type {number}
     * @memberof PositionHistory
     */
    'workNormId': number | null;
    /**
     * 
     * @type {PaymentType}
     * @memberof PositionHistory
     */
    'paymentType'?: PaymentType;
    /**
     * 
     * @type {number}
     * @memberof PositionHistory
     */
    'paymentTypeId': number | null;
    /**
     * 
     * @type {number}
     * @memberof PositionHistory
     */
    'wage': number;
    /**
     * 
     * @type {number}
     * @memberof PositionHistory
     */
    'rate': number;
}
/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'id': number;
    /**
     * 
     * @type {Company}
     * @memberof Task
     */
    'company'?: Company;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'companyId': number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'dateTo': string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'sequenceNumber': number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'entityId': number | null;
}
/**
 * 
 * @export
 * @interface TokensDto
 */
export interface TokensDto {
    /**
     * 
     * @type {string}
     * @memberof TokensDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof TokensDto
     */
    'refreshToken': string | null;
}
/**
 * 
 * @export
 * @interface UpdateAccessDto
 */
export interface UpdateAccessDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateAccessDto
     */
    'roleType'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAccessDto
     */
    'resourceType'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAccessDto
     */
    'accessType'?: string;
}
/**
 * 
 * @export
 * @interface UpdateCompanyDto
 */
export interface UpdateCompanyDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDto
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateCompanyDto
     */
    'lawId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDto
     */
    'taxId'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateCompanyDto
     */
    'accountingId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDto
     */
    'paymentSchedule'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDto
     */
    'payPeriod'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyDto
     */
    'checkDate'?: string;
}
/**
 * 
 * @export
 * @interface UpdateDepartmentDto
 */
export interface UpdateDepartmentDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateDepartmentDto
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateDepartmentDto
     */
    'companyId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateDepartmentDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDepartmentDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateDepartmentDto
     */
    'parentDepartmentId'?: number | null;
}
/**
 * 
 * @export
 * @interface UpdateJobDto
 */
export interface UpdateJobDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateJobDto
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UpdateMinWageDto
 */
export interface UpdateMinWageDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateMinWageDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMinWageDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateMinWageDto
     */
    'paySum'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMinWageDto
     */
    'version': number;
}
/**
 * 
 * @export
 * @interface UpdatePayFundDto
 */
export interface UpdatePayFundDto {
    /**
     * 
     * @type {number}
     * @memberof UpdatePayFundDto
     */
    'positionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayFundDto
     */
    'payPeriod'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayFundDto
     */
    'accPeriod'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayFundDto
     */
    'payFundTypeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayFundDto
     */
    'payFundCategory'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayFundDto
     */
    'incomeSum'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayFundDto
     */
    'baseSum'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayFundDto
     */
    'rate'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayFundDto
     */
    'paySum'?: number;
}
/**
 * 
 * @export
 * @interface UpdatePayFundTypeDto
 */
export interface UpdatePayFundTypeDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePayFundTypeDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayFundTypeDto
     */
    'group'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayFundTypeDto
     */
    'calcMethod'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayFundTypeDto
     */
    'sequence'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayFundTypeDto
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface UpdatePayPeriodDto
 */
export interface UpdatePayPeriodDto {
    /**
     * 
     * @type {Company}
     * @memberof UpdatePayPeriodDto
     */
    'company'?: Company;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'companyId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayPeriodDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayPeriodDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayPeriodDto
     */
    'state'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'inBalance'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'inCompanyDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'inEmployeeDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'accruals'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'deductions'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'basic'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'adjustments'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'bonuses'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'vacations'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'sicks'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'refunds'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'other_accruals'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'taxes'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'payments'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'other_deductions'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'outBalance'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'outCompanyDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'outEmployeeDebt'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayPeriodDto
     */
    'funds'?: number;
    /**
     * 
     * @type {Array<PayPeriodCalcMethod>}
     * @memberof UpdatePayPeriodDto
     */
    'calcMethods'?: Array<PayPeriodCalcMethod>;
}
/**
 * 
 * @export
 * @interface UpdatePaymentDto
 */
export interface UpdatePaymentDto {
    /**
     * 
     * @type {Company}
     * @memberof UpdatePaymentDto
     */
    'company'?: Company;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentDto
     */
    'companyId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'payPeriod'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'accPeriod'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'docNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'docDate'?: string;
    /**
     * 
     * @type {PaymentType}
     * @memberof UpdatePaymentDto
     */
    'paymentType'?: PaymentType;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentDto
     */
    'paymentTypeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentDto
     */
    'baseSum'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentDto
     */
    'deductions'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentDto
     */
    'paySum'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentDto
     */
    'funds'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentDto
     */
    'recordFlags'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'description'?: string;
    /**
     * 
     * @type {Array<PaymentPosition>}
     * @memberof UpdatePaymentDto
     */
    'paymentPositions'?: Array<PaymentPosition>;
}
/**
 * 
 * @export
 * @interface UpdatePaymentPositionDto
 */
export interface UpdatePaymentPositionDto {
    /**
     * 
     * @type {Payment}
     * @memberof UpdatePaymentPositionDto
     */
    'payment'?: Payment;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentPositionDto
     */
    'paymentId'?: number;
    /**
     * 
     * @type {Position}
     * @memberof UpdatePaymentPositionDto
     */
    'position'?: Position;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentPositionDto
     */
    'positionId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentPositionDto
     */
    'baseSum'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentPositionDto
     */
    'deductions'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentPositionDto
     */
    'paySum'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentPositionDto
     */
    'funds'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePaymentPositionDto
     */
    'recordFlags'?: number;
}
/**
 * 
 * @export
 * @interface UpdatePaymentTypeDto
 */
export interface UpdatePaymentTypeDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentTypeDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentTypeDto
     */
    'paymentPart'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentTypeDto
     */
    'paymentGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentTypeDto
     */
    'calcMethod'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentTypeDto
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface UpdatePayrollDto
 */
export interface UpdatePayrollDto {
    /**
     * 
     * @type {Position}
     * @memberof UpdatePayrollDto
     */
    'position'?: Position;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'positionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayrollDto
     */
    'payPeriod'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayrollDto
     */
    'accPeriod'?: string;
    /**
     * 
     * @type {PaymentType}
     * @memberof UpdatePayrollDto
     */
    'paymentType'?: PaymentType;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'paymentTypeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayrollDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayrollDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayrollDto
     */
    'sourceType'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'sourceId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayrollDto
     */
    'dateBegin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePayrollDto
     */
    'dateEnd'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'planDays'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'planHours'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'planSum'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'rate'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'factDays'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'factHours'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'factSum'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'mask1'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'mask2'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'recordFlags'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'fixedFlags'?: number;
    /**
     * 
     * @type {object}
     * @memberof UpdatePayrollDto
     */
    'planHoursByDay'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof UpdatePayrollDto
     */
    'factHoursByDay'?: object | null;
    /**
     * 
     * @type {number}
     * @memberof UpdatePayrollDto
     */
    'parentId'?: number | null;
}
/**
 * 
 * @export
 * @interface UpdatePersonDto
 */
export interface UpdatePersonDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'birthday'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'taxId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'sex'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePersonDto
     */
    'photo'?: string;
    /**
     * 
     * @type {Array<Position>}
     * @memberof UpdatePersonDto
     */
    'positions'?: Array<Position>;
}
/**
 * 
 * @export
 * @interface UpdatePositionDto
 */
export interface UpdatePositionDto {
    /**
     * 
     * @type {Company}
     * @memberof UpdatePositionDto
     */
    'company'?: Company;
    /**
     * 
     * @type {number}
     * @memberof UpdatePositionDto
     */
    'companyId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePositionDto
     */
    'cardNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePositionDto
     */
    'sequenceNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePositionDto
     */
    'description'?: string;
    /**
     * 
     * @type {Person}
     * @memberof UpdatePositionDto
     */
    'person'?: Person;
    /**
     * 
     * @type {number}
     * @memberof UpdatePositionDto
     */
    'personId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePositionDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePositionDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {Array<PositionHistory>}
     * @memberof UpdatePositionDto
     */
    'history'?: Array<PositionHistory>;
    /**
     * 
     * @type {Array<PositionBalance>}
     * @memberof UpdatePositionDto
     */
    'balance'?: Array<PositionBalance>;
}
/**
 * 
 * @export
 * @interface UpdatePositionHistoryDto
 */
export interface UpdatePositionHistoryDto {
    /**
     * 
     * @type {Position}
     * @memberof UpdatePositionHistoryDto
     */
    'position'?: Position;
    /**
     * 
     * @type {number}
     * @memberof UpdatePositionHistoryDto
     */
    'positionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePositionHistoryDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePositionHistoryDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {Department}
     * @memberof UpdatePositionHistoryDto
     */
    'department'?: Department;
    /**
     * 
     * @type {number}
     * @memberof UpdatePositionHistoryDto
     */
    'departmentId'?: number | null;
    /**
     * 
     * @type {Job}
     * @memberof UpdatePositionHistoryDto
     */
    'job'?: Job;
    /**
     * 
     * @type {number}
     * @memberof UpdatePositionHistoryDto
     */
    'jobId'?: number | null;
    /**
     * 
     * @type {WorkNorm}
     * @memberof UpdatePositionHistoryDto
     */
    'workNorm'?: WorkNorm;
    /**
     * 
     * @type {number}
     * @memberof UpdatePositionHistoryDto
     */
    'workNormId'?: number | null;
    /**
     * 
     * @type {PaymentType}
     * @memberof UpdatePositionHistoryDto
     */
    'paymentType'?: PaymentType;
    /**
     * 
     * @type {number}
     * @memberof UpdatePositionHistoryDto
     */
    'paymentTypeId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdatePositionHistoryDto
     */
    'wage'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePositionHistoryDto
     */
    'rate'?: number;
}
/**
 * 
 * @export
 * @interface UpdateRoleDto
 */
export interface UpdateRoleDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateRoleDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRoleDto
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface UpdateTaskDto
 */
export interface UpdateTaskDto {
    /**
     * 
     * @type {Company}
     * @memberof UpdateTaskDto
     */
    'company'?: Company;
    /**
     * 
     * @type {number}
     * @memberof UpdateTaskDto
     */
    'companyId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskDto
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskDto
     */
    'dateTo'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateTaskDto
     */
    'sequenceNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskDto
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateTaskDto
     */
    'entityId'?: number | null;
}
/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'refreshToken'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserDto
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'language'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserDto
     */
    'roleId'?: number;
}
/**
 * 
 * @export
 * @interface UpdateWorkNormDto
 */
export interface UpdateWorkNormDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkNormDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkNormDto
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkNormDto
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateWorkNormDto
     */
    'dateTo'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'refreshToken': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'language': string | null;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'roleId': number;
}
/**
 * 
 * @export
 * @interface UserCompany
 */
export interface UserCompany {
    /**
     * 
     * @type {number}
     * @memberof UserCompany
     */
    'id': number;
    /**
     * 
     * @type {User}
     * @memberof UserCompany
     */
    'user'?: User;
    /**
     * 
     * @type {number}
     * @memberof UserCompany
     */
    'userId': number;
    /**
     * 
     * @type {Company}
     * @memberof UserCompany
     */
    'company'?: Company;
    /**
     * 
     * @type {number}
     * @memberof UserCompany
     */
    'companyId': number;
    /**
     * 
     * @type {number}
     * @memberof UserCompany
     */
    'roleId': number;
}
/**
 * 
 * @export
 * @interface WorkNorm
 */
export interface WorkNorm {
    /**
     * 
     * @type {number}
     * @memberof WorkNorm
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof WorkNorm
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkNorm
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof WorkNorm
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof WorkNorm
     */
    'dateTo': string;
    /**
     * 
     * @type {Array<WorkNormPeriod>}
     * @memberof WorkNorm
     */
    'periods'?: Array<WorkNormPeriod>;
}
/**
 * 
 * @export
 * @interface WorkNormPeriod
 */
export interface WorkNormPeriod {
    /**
     * 
     * @type {number}
     * @memberof WorkNormPeriod
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof WorkNormPeriod
     */
    'workNormId': number;
    /**
     * 
     * @type {number}
     * @memberof WorkNormPeriod
     */
    'day': number;
    /**
     * 
     * @type {number}
     * @memberof WorkNormPeriod
     */
    'hours': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AvailableAccessDto} availableAccessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerAvailable: async (availableAccessDto: AvailableAccessDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'availableAccessDto' is not null or undefined
            assertParamExists('accessControllerAvailable', 'availableAccessDto', availableAccessDto)
            const localVarPath = `/api/access/available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(availableAccessDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AvailableAccessUserDto} availableAccessUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerAvailableForUser: async (availableAccessUserDto: AvailableAccessUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'availableAccessUserDto' is not null or undefined
            assertParamExists('accessControllerAvailableForUser', 'availableAccessUserDto', availableAccessUserDto)
            const localVarPath = `/api/access/available-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(availableAccessUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AvailableAccessUserCompanyDto} availableAccessUserCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerAvailableForUserCompany: async (availableAccessUserCompanyDto: AvailableAccessUserCompanyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'availableAccessUserCompanyDto' is not null or undefined
            assertParamExists('accessControllerAvailableForUserCompany', 'availableAccessUserCompanyDto', availableAccessUserCompanyDto)
            const localVarPath = `/api/access/available-user-company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(availableAccessUserCompanyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAccessDto} createAccessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerCreate: async (createAccessDto: CreateAccessDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAccessDto' is not null or undefined
            assertParamExists('accessControllerCreate', 'createAccessDto', createAccessDto)
            const localVarPath = `/api/access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAccessDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roleType 
         * @param {string} resourceType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerFindAll: async (roleType: string, resourceType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleType' is not null or undefined
            assertParamExists('accessControllerFindAll', 'roleType', roleType)
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('accessControllerFindAll', 'resourceType', resourceType)
            const localVarPath = `/api/access`
                .replace(`{${"roleType"}}`, encodeURIComponent(String(roleType)))
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accessControllerFindOne', 'id', id)
            const localVarPath = `/api/access/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accessControllerRemove', 'id', id)
            const localVarPath = `/api/access/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAccessDto} updateAccessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerUpdate: async (id: number, updateAccessDto: UpdateAccessDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accessControllerUpdate', 'id', id)
            // verify required parameter 'updateAccessDto' is not null or undefined
            assertParamExists('accessControllerUpdate', 'updateAccessDto', updateAccessDto)
            const localVarPath = `/api/access/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAccessDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountingControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountingControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountingControllerFindOne', 'id', id)
            const localVarPath = `/api/accounting/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerAddLocales: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/locales/add/{lng}/{ns}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetLocales: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/locales/{lang}/{ns}.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetTitle: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/title`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDemo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthDto} authDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (authDto: AuthDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authDto' is not null or undefined
            assertParamExists('authControllerLogin', 'authDto', authDto)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshTokens: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('authControllerRegister', 'createUserDto', createUserDto)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCompanyDto} createCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerCreate: async (createCompanyDto: CreateCompanyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCompanyDto' is not null or undefined
            assertParamExists('companiesControllerCreate', 'createCompanyDto', createCompanyDto)
            const localVarPath = `/api/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCompanyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesControllerFindOne', 'id', id)
            const localVarPath = `/api/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesControllerRemove', 'id', id)
            const localVarPath = `/api/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerSalaryCalculate: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesControllerSalaryCalculate', 'id', id)
            const localVarPath = `/api/companies/{id}/calculate-payroll`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCompanyDto} updateCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerUpdate: async (id: number, updateCompanyDto: UpdateCompanyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companiesControllerUpdate', 'id', id)
            // verify required parameter 'updateCompanyDto' is not null or undefined
            assertParamExists('companiesControllerUpdate', 'updateCompanyDto', updateCompanyDto)
            const localVarPath = `/api/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCompanyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateDepartmentDto} createDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsControllerCreate: async (createDepartmentDto: CreateDepartmentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDepartmentDto' is not null or undefined
            assertParamExists('departmentsControllerCreate', 'createDepartmentDto', createDepartmentDto)
            const localVarPath = `/api/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDepartmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} companyId 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsControllerFindAll: async (companyId: number, relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('departmentsControllerFindAll', 'companyId', companyId)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('departmentsControllerFindAll', 'relations', relations)
            const localVarPath = `/api/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsControllerFindOne: async (id: number, relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentsControllerFindOne', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('departmentsControllerFindOne', 'relations', relations)
            const localVarPath = `/api/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentsControllerRemove', 'id', id)
            const localVarPath = `/api/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateDepartmentDto} updateDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsControllerUpdate: async (id: number, updateDepartmentDto: UpdateDepartmentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentsControllerUpdate', 'id', id)
            // verify required parameter 'updateDepartmentDto' is not null or undefined
            assertParamExists('departmentsControllerUpdate', 'updateDepartmentDto', updateDepartmentDto)
            const localVarPath = `/api/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDepartmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreate: async (createJobDto: CreateJobDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createJobDto' is not null or undefined
            assertParamExists('jobsControllerCreate', 'createJobDto', createJobDto)
            const localVarPath = `/api/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerFindOne', 'id', id)
            const localVarPath = `/api/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerRemove', 'id', id)
            const localVarPath = `/api/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateJobDto} updateJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdate: async (id: number, updateJobDto: UpdateJobDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsControllerUpdate', 'id', id)
            // verify required parameter 'updateJobDto' is not null or undefined
            assertParamExists('jobsControllerUpdate', 'updateJobDto', updateJobDto)
            const localVarPath = `/api/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lawsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/laws`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lawsControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('lawsControllerFindOne', 'id', id)
            const localVarPath = `/api/laws/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minWageControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/min-wage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minWageControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('minWageControllerFindOne', 'id', id)
            const localVarPath = `/api/min-wage/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minWageControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('minWageControllerRemove', 'id', id)
            const localVarPath = `/api/min-wage/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateMinWageDto} updateMinWageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minWageControllerUpdate: async (id: number, updateMinWageDto: UpdateMinWageDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('minWageControllerUpdate', 'id', id)
            // verify required parameter 'updateMinWageDto' is not null or undefined
            assertParamExists('minWageControllerUpdate', 'updateMinWageDto', updateMinWageDto)
            const localVarPath = `/api/min-wage/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMinWageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePayFundTypeDto} createPayFundTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundTypesControllerCreate: async (createPayFundTypeDto: CreatePayFundTypeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPayFundTypeDto' is not null or undefined
            assertParamExists('payFundTypesControllerCreate', 'createPayFundTypeDto', createPayFundTypeDto)
            const localVarPath = `/api/pay-fund-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPayFundTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundTypesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pay-fund-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundTypesControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payFundTypesControllerFindOne', 'id', id)
            const localVarPath = `/api/pay-fund-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundTypesControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payFundTypesControllerRemove', 'id', id)
            const localVarPath = `/api/pay-fund-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayFundTypeDto} updatePayFundTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundTypesControllerUpdate: async (id: number, updatePayFundTypeDto: UpdatePayFundTypeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payFundTypesControllerUpdate', 'id', id)
            // verify required parameter 'updatePayFundTypeDto' is not null or undefined
            assertParamExists('payFundTypesControllerUpdate', 'updatePayFundTypeDto', updatePayFundTypeDto)
            const localVarPath = `/api/pay-fund-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePayFundTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePayFundDto} createPayFundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundsControllerCreate: async (createPayFundDto: CreatePayFundDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPayFundDto' is not null or undefined
            assertParamExists('payFundsControllerCreate', 'createPayFundDto', createPayFundDto)
            const localVarPath = `/api/fund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPayFundDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindPayFundDto} findPayFundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundsControllerFindAll: async (findPayFundDto: FindPayFundDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findPayFundDto' is not null or undefined
            assertParamExists('payFundsControllerFindAll', 'findPayFundDto', findPayFundDto)
            const localVarPath = `/api/fund/find-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findPayFundDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundsControllerFindOne: async (id: number, relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payFundsControllerFindOne', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('payFundsControllerFindOne', 'relations', relations)
            const localVarPath = `/api/fund/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundsControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payFundsControllerRemove', 'id', id)
            const localVarPath = `/api/fund/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayFundDto} updatePayFundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundsControllerUpdate: async (id: number, updatePayFundDto: UpdatePayFundDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payFundsControllerUpdate', 'id', id)
            // verify required parameter 'updatePayFundDto' is not null or undefined
            assertParamExists('payFundsControllerUpdate', 'updatePayFundDto', updatePayFundDto)
            const localVarPath = `/api/fund/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePayFundDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerClose: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payPeriodsControllerClose', 'id', id)
            const localVarPath = `/api/pay-periods/close/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePayPeriodDto} createPayPeriodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerCreate: async (createPayPeriodDto: CreatePayPeriodDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPayPeriodDto' is not null or undefined
            assertParamExists('payPeriodsControllerCreate', 'createPayPeriodDto', createPayPeriodDto)
            const localVarPath = `/api/pay-periods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPayPeriodDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} companyId 
         * @param {boolean} relations 
         * @param {boolean} fullFieldList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerFindAll: async (companyId: number, relations: boolean, fullFieldList: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('payPeriodsControllerFindAll', 'companyId', companyId)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('payPeriodsControllerFindAll', 'relations', relations)
            // verify required parameter 'fullFieldList' is not null or undefined
            assertParamExists('payPeriodsControllerFindAll', 'fullFieldList', fullFieldList)
            const localVarPath = `/api/pay-periods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }

            if (fullFieldList !== undefined) {
                localVarQueryParameter['fullFieldList'] = fullFieldList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} companyId 
         * @param {boolean} relations 
         * @param {boolean} fullFieldList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerFindCurrent: async (companyId: number, relations: boolean, fullFieldList: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('payPeriodsControllerFindCurrent', 'companyId', companyId)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('payPeriodsControllerFindCurrent', 'relations', relations)
            // verify required parameter 'fullFieldList' is not null or undefined
            assertParamExists('payPeriodsControllerFindCurrent', 'fullFieldList', fullFieldList)
            const localVarPath = `/api/pay-periods/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }

            if (fullFieldList !== undefined) {
                localVarQueryParameter['fullFieldList'] = fullFieldList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {boolean} fullFieldList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerFindOne: async (id: number, relations: boolean, fullFieldList: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payPeriodsControllerFindOne', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('payPeriodsControllerFindOne', 'relations', relations)
            // verify required parameter 'fullFieldList' is not null or undefined
            assertParamExists('payPeriodsControllerFindOne', 'fullFieldList', fullFieldList)
            const localVarPath = `/api/pay-periods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }

            if (fullFieldList !== undefined) {
                localVarQueryParameter['fullFieldList'] = fullFieldList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerOpen: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payPeriodsControllerOpen', 'id', id)
            const localVarPath = `/api/pay-periods/open/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payPeriodsControllerRemove', 'id', id)
            const localVarPath = `/api/pay-periods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayPeriodDto} updatePayPeriodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerUpdate: async (id: number, updatePayPeriodDto: UpdatePayPeriodDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payPeriodsControllerUpdate', 'id', id)
            // verify required parameter 'updatePayPeriodDto' is not null or undefined
            assertParamExists('payPeriodsControllerUpdate', 'updatePayPeriodDto', updatePayPeriodDto)
            const localVarPath = `/api/pay-periods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePayPeriodDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePaymentPositionDto} createPaymentPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPositionsControllerCreate: async (createPaymentPositionDto: CreatePaymentPositionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPaymentPositionDto' is not null or undefined
            assertParamExists('paymentPositionsControllerCreate', 'createPaymentPositionDto', createPaymentPositionDto)
            const localVarPath = `/api/payment-positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPaymentPositionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindPaymentPositionDto} findPaymentPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPositionsControllerFindAll: async (findPaymentPositionDto: FindPaymentPositionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findPaymentPositionDto' is not null or undefined
            assertParamExists('paymentPositionsControllerFindAll', 'findPaymentPositionDto', findPaymentPositionDto)
            const localVarPath = `/api/payment-positions/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findPaymentPositionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPositionsControllerFindOne: async (id: number, relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentPositionsControllerFindOne', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('paymentPositionsControllerFindOne', 'relations', relations)
            const localVarPath = `/api/payment-positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPositionsControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentPositionsControllerRemove', 'id', id)
            const localVarPath = `/api/payment-positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePaymentPositionDto} updatePaymentPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPositionsControllerUpdate: async (id: number, updatePaymentPositionDto: UpdatePaymentPositionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentPositionsControllerUpdate', 'id', id)
            // verify required parameter 'updatePaymentPositionDto' is not null or undefined
            assertParamExists('paymentPositionsControllerUpdate', 'updatePaymentPositionDto', updatePaymentPositionDto)
            const localVarPath = `/api/payment-positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePaymentPositionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePaymentTypeDto} createPaymentTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentTypesControllerCreate: async (createPaymentTypeDto: CreatePaymentTypeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPaymentTypeDto' is not null or undefined
            assertParamExists('paymentTypesControllerCreate', 'createPaymentTypeDto', createPaymentTypeDto)
            const localVarPath = `/api/payment-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPaymentTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} part 
         * @param {string} groups 
         * @param {string} methods 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentTypesControllerFindAll: async (part: string, groups: string, methods: string, ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'part' is not null or undefined
            assertParamExists('paymentTypesControllerFindAll', 'part', part)
            // verify required parameter 'groups' is not null or undefined
            assertParamExists('paymentTypesControllerFindAll', 'groups', groups)
            // verify required parameter 'methods' is not null or undefined
            assertParamExists('paymentTypesControllerFindAll', 'methods', methods)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('paymentTypesControllerFindAll', 'ids', ids)
            const localVarPath = `/api/payment-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (part !== undefined) {
                localVarQueryParameter['part'] = part;
            }

            if (groups !== undefined) {
                localVarQueryParameter['groups'] = groups;
            }

            if (methods !== undefined) {
                localVarQueryParameter['methods'] = methods;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentTypesControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentTypesControllerFindOne', 'id', id)
            const localVarPath = `/api/payment-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentTypesControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentTypesControllerRemove', 'id', id)
            const localVarPath = `/api/payment-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePaymentTypeDto} updatePaymentTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentTypesControllerUpdate: async (id: number, updatePaymentTypeDto: UpdatePaymentTypeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentTypesControllerUpdate', 'id', id)
            // verify required parameter 'updatePaymentTypeDto' is not null or undefined
            assertParamExists('paymentTypesControllerUpdate', 'updatePaymentTypeDto', updatePaymentTypeDto)
            const localVarPath = `/api/payment-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePaymentTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePaymentDto} createPaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerCreate: async (createPaymentDto: CreatePaymentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPaymentDto' is not null or undefined
            assertParamExists('paymentsControllerCreate', 'createPaymentDto', createPaymentDto)
            const localVarPath = `/api/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPaymentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindPaymentDto} findPaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerFindAll: async (findPaymentDto: FindPaymentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findPaymentDto' is not null or undefined
            assertParamExists('paymentsControllerFindAll', 'findPaymentDto', findPaymentDto)
            const localVarPath = `/api/payments/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findPaymentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerFindOne: async (id: number, relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentsControllerFindOne', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('paymentsControllerFindOne', 'relations', relations)
            const localVarPath = `/api/payments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerProcess: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentsControllerProcess', 'id', id)
            const localVarPath = `/api/payments/process/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentsControllerRemove', 'id', id)
            const localVarPath = `/api/payments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePaymentDto} updatePaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerUpdate: async (id: number, updatePaymentDto: UpdatePaymentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentsControllerUpdate', 'id', id)
            // verify required parameter 'updatePaymentDto' is not null or undefined
            assertParamExists('paymentsControllerUpdate', 'updatePaymentDto', updatePaymentDto)
            const localVarPath = `/api/payments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePaymentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerWithdraw: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentsControllerWithdraw', 'id', id)
            const localVarPath = `/api/payments/withdraw/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePayrollDto} createPayrollDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollsControllerCreate: async (createPayrollDto: CreatePayrollDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPayrollDto' is not null or undefined
            assertParamExists('payrollsControllerCreate', 'createPayrollDto', createPayrollDto)
            const localVarPath = `/api/payroll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPayrollDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindPayrollDto} findPayrollDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollsControllerFindAll: async (findPayrollDto: FindPayrollDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findPayrollDto' is not null or undefined
            assertParamExists('payrollsControllerFindAll', 'findPayrollDto', findPayrollDto)
            const localVarPath = `/api/payroll/find-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findPayrollDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollsControllerFindOne: async (id: number, relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payrollsControllerFindOne', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('payrollsControllerFindOne', 'relations', relations)
            const localVarPath = `/api/payroll/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollsControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payrollsControllerRemove', 'id', id)
            const localVarPath = `/api/payroll/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayrollDto} updatePayrollDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollsControllerUpdate: async (id: number, updatePayrollDto: UpdatePayrollDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('payrollsControllerUpdate', 'id', id)
            // verify required parameter 'updatePayrollDto' is not null or undefined
            assertParamExists('payrollsControllerUpdate', 'updatePayrollDto', updatePayrollDto)
            const localVarPath = `/api/payroll/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePayrollDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePersonDto} createPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerCreate: async (createPersonDto: CreatePersonDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPersonDto' is not null or undefined
            assertParamExists('personsControllerCreate', 'createPersonDto', createPersonDto)
            const localVarPath = `/api/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPersonDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindPersonDto} findPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerFind: async (findPersonDto: FindPersonDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findPersonDto' is not null or undefined
            assertParamExists('personsControllerFind', 'findPersonDto', findPersonDto)
            const localVarPath = `/api/persons/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findPersonDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('personsControllerFindOne', 'id', id)
            const localVarPath = `/api/persons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('personsControllerRemove', 'id', id)
            const localVarPath = `/api/persons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePersonDto} updatePersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerUpdate: async (id: number, updatePersonDto: UpdatePersonDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('personsControllerUpdate', 'id', id)
            // verify required parameter 'updatePersonDto' is not null or undefined
            assertParamExists('personsControllerUpdate', 'updatePersonDto', updatePersonDto)
            const localVarPath = `/api/persons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePersonDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePositionHistoryDto} createPositionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerCreate: async (createPositionHistoryDto: CreatePositionHistoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPositionHistoryDto' is not null or undefined
            assertParamExists('positionHistoryControllerCreate', 'createPositionHistoryDto', createPositionHistoryDto)
            const localVarPath = `/api/position-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPositionHistoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} positionId 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerFindAll: async (positionId: number, relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('positionHistoryControllerFindAll', 'positionId', positionId)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('positionHistoryControllerFindAll', 'relations', relations)
            const localVarPath = `/api/position-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindPositionHistoryDto} findPositionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerFindLast: async (findPositionHistoryDto: FindPositionHistoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findPositionHistoryDto' is not null or undefined
            assertParamExists('positionHistoryControllerFindLast', 'findPositionHistoryDto', findPositionHistoryDto)
            const localVarPath = `/api/position-history/find-last`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findPositionHistoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerFindOne: async (id: number, relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('positionHistoryControllerFindOne', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('positionHistoryControllerFindOne', 'relations', relations)
            const localVarPath = `/api/position-history/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('positionHistoryControllerRemove', 'id', id)
            const localVarPath = `/api/position-history/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePositionHistoryDto} updatePositionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerUpdate: async (id: number, updatePositionHistoryDto: UpdatePositionHistoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('positionHistoryControllerUpdate', 'id', id)
            // verify required parameter 'updatePositionHistoryDto' is not null or undefined
            assertParamExists('positionHistoryControllerUpdate', 'updatePositionHistoryDto', updatePositionHistoryDto)
            const localVarPath = `/api/position-history/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePositionHistoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePositionDto} createPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerCreate: async (createPositionDto: CreatePositionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPositionDto' is not null or undefined
            assertParamExists('positionsControllerCreate', 'createPositionDto', createPositionDto)
            const localVarPath = `/api/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPositionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindPositionDto} findPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerFindAll: async (findPositionDto: FindPositionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findPositionDto' is not null or undefined
            assertParamExists('positionsControllerFindAll', 'findPositionDto', findPositionDto)
            const localVarPath = `/api/positions/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findPositionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindAllPositionBalanceDto} findAllPositionBalanceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerFindBalance: async (findAllPositionBalanceDto: FindAllPositionBalanceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findAllPositionBalanceDto' is not null or undefined
            assertParamExists('positionsControllerFindBalance', 'findAllPositionBalanceDto', findAllPositionBalanceDto)
            const localVarPath = `/api/positions/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findAllPositionBalanceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {string} onDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerFindFirstByPersonId: async (id: number, relations: boolean, onDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('positionsControllerFindFirstByPersonId', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('positionsControllerFindFirstByPersonId', 'relations', relations)
            // verify required parameter 'onDate' is not null or undefined
            assertParamExists('positionsControllerFindFirstByPersonId', 'onDate', onDate)
            const localVarPath = `/api/positions/person/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }

            if (onDate !== undefined) {
                localVarQueryParameter['onDate'] = (onDate as any instanceof Date) ?
                    (onDate as any).toISOString() :
                    onDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {string} onDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerFindOne: async (id: number, relations: boolean, onDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('positionsControllerFindOne', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('positionsControllerFindOne', 'relations', relations)
            // verify required parameter 'onDate' is not null or undefined
            assertParamExists('positionsControllerFindOne', 'onDate', onDate)
            const localVarPath = `/api/positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }

            if (onDate !== undefined) {
                localVarQueryParameter['onDate'] = (onDate as any instanceof Date) ?
                    (onDate as any).toISOString() :
                    onDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('positionsControllerRemove', 'id', id)
            const localVarPath = `/api/positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePositionDto} updatePositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerUpdate: async (id: number, updatePositionDto: UpdatePositionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('positionsControllerUpdate', 'id', id)
            // verify required parameter 'updatePositionDto' is not null or undefined
            assertParamExists('positionsControllerUpdate', 'updatePositionDto', updatePositionDto)
            const localVarPath = `/api/positions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePositionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreate: async (createRoleDto: CreateRoleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoleDto' is not null or undefined
            assertParamExists('rolesControllerCreate', 'createRoleDto', createRoleDto)
            const localVarPath = `/api/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindOne: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesControllerFindOne', 'id', id)
            const localVarPath = `/api/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesControllerRemove', 'id', id)
            const localVarPath = `/api/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateRoleDto} updateRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdate: async (id: number, updateRoleDto: UpdateRoleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rolesControllerUpdate', 'id', id)
            // verify required parameter 'updateRoleDto' is not null or undefined
            assertParamExists('rolesControllerUpdate', 'updateRoleDto', updateRoleDto)
            const localVarPath = `/api/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sseControllerGetCompanyStream: async (companyId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('sseControllerGetCompanyStream', 'companyId', companyId)
            const localVarPath = `/api/server-events/company-stream/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTaskDto} createTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksControllerCreate: async (createTaskDto: CreateTaskDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTaskDto' is not null or undefined
            assertParamExists('tasksControllerCreate', 'createTaskDto', createTaskDto)
            const localVarPath = `/api/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTaskDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FindTaskDto} findTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksControllerFindAll: async (findTaskDto: FindTaskDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findTaskDto' is not null or undefined
            assertParamExists('tasksControllerFindAll', 'findTaskDto', findTaskDto)
            const localVarPath = `/api/tasks/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findTaskDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksControllerFindOne: async (id: number, relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tasksControllerFindOne', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('tasksControllerFindOne', 'relations', relations)
            const localVarPath = `/api/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tasksControllerRemove', 'id', id)
            const localVarPath = `/api/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateTaskDto} updateTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksControllerUpdate: async (id: number, updateTaskDto: UpdateTaskDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tasksControllerUpdate', 'id', id)
            // verify required parameter 'updateTaskDto' is not null or undefined
            assertParamExists('tasksControllerUpdate', 'updateTaskDto', updateTaskDto)
            const localVarPath = `/api/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTaskDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('usersControllerCreate', 'createUserDto', createUserDto)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll: async (relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('usersControllerFindAll', 'relations', relations)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne: async (id: number, relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerFindOne', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('usersControllerFindOne', 'relations', relations)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetCurrentUser: async (relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('usersControllerGetCurrentUser', 'relations', relations)
            const localVarPath = `/api/users/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerRemove', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate: async (id: number, updateUserDto: UpdateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerUpdate', 'id', id)
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('usersControllerUpdate', 'updateUserDto', updateUserDto)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {boolean} deleted 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserCompanyList: async (id: number, relations: boolean, deleted: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerUserCompanyList', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('usersControllerUserCompanyList', 'relations', relations)
            // verify required parameter 'deleted' is not null or undefined
            assertParamExists('usersControllerUserCompanyList', 'deleted', deleted)
            const localVarPath = `/api/users/{id}/companies`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }

            if (deleted !== undefined) {
                localVarQueryParameter['deleted'] = deleted;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserCompanyRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerUserCompanyRemove', 'id', id)
            const localVarPath = `/api/users/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserCompanyRestore: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerUserCompanyRestore', 'id', id)
            const localVarPath = `/api/users/company/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateWorkNormDto} createWorkNormDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workNormsControllerCreate: async (createWorkNormDto: CreateWorkNormDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWorkNormDto' is not null or undefined
            assertParamExists('workNormsControllerCreate', 'createWorkNormDto', createWorkNormDto)
            const localVarPath = `/api/work-norms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkNormDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workNormsControllerFindAll: async (relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('workNormsControllerFindAll', 'relations', relations)
            const localVarPath = `/api/work-norms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workNormsControllerFindOne: async (id: number, relations: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workNormsControllerFindOne', 'id', id)
            // verify required parameter 'relations' is not null or undefined
            assertParamExists('workNormsControllerFindOne', 'relations', relations)
            const localVarPath = `/api/work-norms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (relations !== undefined) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workNormsControllerRemove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workNormsControllerRemove', 'id', id)
            const localVarPath = `/api/work-norms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateWorkNormDto} updateWorkNormDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workNormsControllerUpdate: async (id: number, updateWorkNormDto: UpdateWorkNormDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workNormsControllerUpdate', 'id', id)
            // verify required parameter 'updateWorkNormDto' is not null or undefined
            assertParamExists('workNormsControllerUpdate', 'updateWorkNormDto', updateWorkNormDto)
            const localVarPath = `/api/work-norms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkNormDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AvailableAccessDto} availableAccessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControllerAvailable(availableAccessDto: AvailableAccessDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessControllerAvailable(availableAccessDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accessControllerAvailable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AvailableAccessUserDto} availableAccessUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControllerAvailableForUser(availableAccessUserDto: AvailableAccessUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessControllerAvailableForUser(availableAccessUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accessControllerAvailableForUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AvailableAccessUserCompanyDto} availableAccessUserCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControllerAvailableForUserCompany(availableAccessUserCompanyDto: AvailableAccessUserCompanyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessControllerAvailableForUserCompany(availableAccessUserCompanyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accessControllerAvailableForUserCompany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateAccessDto} createAccessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControllerCreate(createAccessDto: CreateAccessDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessControllerCreate(createAccessDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accessControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} roleType 
         * @param {string} resourceType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControllerFindAll(roleType: string, resourceType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessControllerFindAll(roleType, resourceType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accessControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accessControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accessControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAccessDto} updateAccessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accessControllerUpdate(id: number, updateAccessDto: UpdateAccessDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accessControllerUpdate(id, updateAccessDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accessControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountingControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountingControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accountingControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountingControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountingControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accountingControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerAddLocales(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerAddLocales(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appControllerAddLocales']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appControllerGetHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetLocales(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetLocales(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appControllerGetLocales']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetTitle(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetTitle(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appControllerGetTitle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerDemo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerDemo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authControllerDemo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AuthDto} authDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(authDto: AuthDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokensDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(authDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authControllerLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRefreshTokens(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokensDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRefreshTokens(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authControllerRefreshTokens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokensDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authControllerRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCompanyDto} createCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerCreate(createCompanyDto: CreateCompanyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerCreate(createCompanyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.companiesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.companiesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.companiesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.companiesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerSalaryCalculate(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerSalaryCalculate(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.companiesControllerSalaryCalculate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCompanyDto} updateCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companiesControllerUpdate(id: number, updateCompanyDto: UpdateCompanyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companiesControllerUpdate(id, updateCompanyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.companiesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateDepartmentDto} createDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentsControllerCreate(createDepartmentDto: CreateDepartmentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentsControllerCreate(createDepartmentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.departmentsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} companyId 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentsControllerFindAll(companyId: number, relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Department>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentsControllerFindAll(companyId, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.departmentsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentsControllerFindOne(id, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.departmentsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentsControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.departmentsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateDepartmentDto} updateDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentsControllerUpdate(id: number, updateDepartmentDto: UpdateDepartmentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentsControllerUpdate(id, updateDepartmentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.departmentsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerCreate(createJobDto: CreateJobDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerCreate(createJobDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.jobsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Job>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.jobsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.jobsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.jobsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateJobDto} updateJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsControllerUpdate(id: number, updateJobDto: UpdateJobDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsControllerUpdate(id, updateJobDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.jobsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lawsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lawsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.lawsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lawsControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lawsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.lawsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async minWageControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MinWage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.minWageControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.minWageControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async minWageControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MinWage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.minWageControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.minWageControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async minWageControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MinWage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.minWageControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.minWageControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateMinWageDto} updateMinWageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async minWageControllerUpdate(id: number, updateMinWageDto: UpdateMinWageDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MinWage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.minWageControllerUpdate(id, updateMinWageDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.minWageControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePayFundTypeDto} createPayFundTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payFundTypesControllerCreate(createPayFundTypeDto: CreatePayFundTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayFundType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payFundTypesControllerCreate(createPayFundTypeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payFundTypesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payFundTypesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayFundType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payFundTypesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payFundTypesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payFundTypesControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayFundType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payFundTypesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payFundTypesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payFundTypesControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayFundType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payFundTypesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payFundTypesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayFundTypeDto} updatePayFundTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payFundTypesControllerUpdate(id: number, updatePayFundTypeDto: UpdatePayFundTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayFundType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payFundTypesControllerUpdate(id, updatePayFundTypeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payFundTypesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePayFundDto} createPayFundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payFundsControllerCreate(createPayFundDto: CreatePayFundDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayFund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payFundsControllerCreate(createPayFundDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payFundsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FindPayFundDto} findPayFundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payFundsControllerFindAll(findPayFundDto: FindPayFundDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayFund>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payFundsControllerFindAll(findPayFundDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payFundsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payFundsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayFund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payFundsControllerFindOne(id, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payFundsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payFundsControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayFund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payFundsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payFundsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayFundDto} updatePayFundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payFundsControllerUpdate(id: number, updatePayFundDto: UpdatePayFundDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayFund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payFundsControllerUpdate(id, updatePayFundDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payFundsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payPeriodsControllerClose(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPeriod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payPeriodsControllerClose(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payPeriodsControllerClose']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePayPeriodDto} createPayPeriodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payPeriodsControllerCreate(createPayPeriodDto: CreatePayPeriodDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPeriod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payPeriodsControllerCreate(createPayPeriodDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payPeriodsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} companyId 
         * @param {boolean} relations 
         * @param {boolean} fullFieldList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payPeriodsControllerFindAll(companyId: number, relations: boolean, fullFieldList: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayPeriod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payPeriodsControllerFindAll(companyId, relations, fullFieldList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payPeriodsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} companyId 
         * @param {boolean} relations 
         * @param {boolean} fullFieldList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payPeriodsControllerFindCurrent(companyId: number, relations: boolean, fullFieldList: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPeriod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payPeriodsControllerFindCurrent(companyId, relations, fullFieldList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payPeriodsControllerFindCurrent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {boolean} fullFieldList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payPeriodsControllerFindOne(id: number, relations: boolean, fullFieldList: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPeriod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payPeriodsControllerFindOne(id, relations, fullFieldList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payPeriodsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payPeriodsControllerOpen(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPeriod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payPeriodsControllerOpen(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payPeriodsControllerOpen']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payPeriodsControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPeriod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payPeriodsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payPeriodsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayPeriodDto} updatePayPeriodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payPeriodsControllerUpdate(id: number, updatePayPeriodDto: UpdatePayPeriodDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPeriod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payPeriodsControllerUpdate(id, updatePayPeriodDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payPeriodsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePaymentPositionDto} createPaymentPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentPositionsControllerCreate(createPaymentPositionDto: CreatePaymentPositionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPosition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentPositionsControllerCreate(createPaymentPositionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentPositionsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FindPaymentPositionDto} findPaymentPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentPositionsControllerFindAll(findPaymentPositionDto: FindPaymentPositionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentPosition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentPositionsControllerFindAll(findPaymentPositionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentPositionsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentPositionsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPosition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentPositionsControllerFindOne(id, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentPositionsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentPositionsControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPosition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentPositionsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentPositionsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePaymentPositionDto} updatePaymentPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentPositionsControllerUpdate(id: number, updatePaymentPositionDto: UpdatePaymentPositionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentPosition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentPositionsControllerUpdate(id, updatePaymentPositionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentPositionsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePaymentTypeDto} createPaymentTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentTypesControllerCreate(createPaymentTypeDto: CreatePaymentTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentTypesControllerCreate(createPaymentTypeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentTypesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} part 
         * @param {string} groups 
         * @param {string} methods 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentTypesControllerFindAll(part: string, groups: string, methods: string, ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentTypesControllerFindAll(part, groups, methods, ids, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentTypesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentTypesControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentTypesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentTypesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentTypesControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentTypesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentTypesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePaymentTypeDto} updatePaymentTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentTypesControllerUpdate(id: number, updatePaymentTypeDto: UpdatePaymentTypeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentTypesControllerUpdate(id, updatePaymentTypeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentTypesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePaymentDto} createPaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsControllerCreate(createPaymentDto: CreatePaymentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsControllerCreate(createPaymentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FindPaymentDto} findPaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsControllerFindAll(findPaymentDto: FindPaymentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsControllerFindAll(findPaymentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsControllerFindOne(id, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsControllerProcess(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsControllerProcess(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentsControllerProcess']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePaymentDto} updatePaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsControllerUpdate(id: number, updatePaymentDto: UpdatePaymentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsControllerUpdate(id, updatePaymentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsControllerWithdraw(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsControllerWithdraw(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.paymentsControllerWithdraw']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePayrollDto} createPayrollDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payrollsControllerCreate(createPayrollDto: CreatePayrollDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payrollsControllerCreate(createPayrollDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payrollsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FindPayrollDto} findPayrollDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payrollsControllerFindAll(findPayrollDto: FindPayrollDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payroll>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payrollsControllerFindAll(findPayrollDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payrollsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payrollsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payrollsControllerFindOne(id, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payrollsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payrollsControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payrollsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payrollsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayrollDto} updatePayrollDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payrollsControllerUpdate(id: number, updatePayrollDto: UpdatePayrollDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payrollsControllerUpdate(id, updatePayrollDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.payrollsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePersonDto} createPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personsControllerCreate(createPersonDto: CreatePersonDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personsControllerCreate(createPersonDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.personsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FindPersonDto} findPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personsControllerFind(findPersonDto: FindPersonDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personsControllerFind(findPersonDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.personsControllerFind']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personsControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personsControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.personsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personsControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.personsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personsControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.personsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePersonDto} updatePersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personsControllerUpdate(id: number, updatePersonDto: UpdatePersonDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.personsControllerUpdate(id, updatePersonDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.personsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePositionHistoryDto} createPositionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionHistoryControllerCreate(createPositionHistoryDto: CreatePositionHistoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionHistoryControllerCreate(createPositionHistoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionHistoryControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} positionId 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionHistoryControllerFindAll(positionId: number, relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionHistoryControllerFindAll(positionId, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionHistoryControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FindPositionHistoryDto} findPositionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionHistoryControllerFindLast(findPositionHistoryDto: FindPositionHistoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionHistoryControllerFindLast(findPositionHistoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionHistoryControllerFindLast']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionHistoryControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionHistoryControllerFindOne(id, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionHistoryControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionHistoryControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionHistoryControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionHistoryControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePositionHistoryDto} updatePositionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionHistoryControllerUpdate(id: number, updatePositionHistoryDto: UpdatePositionHistoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionHistoryControllerUpdate(id, updatePositionHistoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionHistoryControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePositionDto} createPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionsControllerCreate(createPositionDto: CreatePositionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionsControllerCreate(createPositionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FindPositionDto} findPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionsControllerFindAll(findPositionDto: FindPositionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionsControllerFindAll(findPositionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FindAllPositionBalanceDto} findAllPositionBalanceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionsControllerFindBalance(findAllPositionBalanceDto: FindAllPositionBalanceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionsControllerFindBalance(findAllPositionBalanceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionsControllerFindBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {string} onDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionsControllerFindFirstByPersonId(id: number, relations: boolean, onDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionsControllerFindFirstByPersonId(id, relations, onDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionsControllerFindFirstByPersonId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {string} onDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionsControllerFindOne(id: number, relations: boolean, onDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionsControllerFindOne(id, relations, onDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionsControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePositionDto} updatePositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionsControllerUpdate(id: number, updatePositionDto: UpdatePositionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionsControllerUpdate(id, updatePositionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.positionsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerCreate(createRoleDto: CreateRoleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerCreate(createRoleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rolesControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rolesControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerFindOne(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rolesControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rolesControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateRoleDto} updateRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerUpdate(id: number, updateRoleDto: UpdateRoleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerUpdate(id, updateRoleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rolesControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sseControllerGetCompanyStream(companyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sseControllerGetCompanyStream(companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sseControllerGetCompanyStream']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateTaskDto} createTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksControllerCreate(createTaskDto: CreateTaskDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksControllerCreate(createTaskDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tasksControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FindTaskDto} findTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksControllerFindAll(findTaskDto: FindTaskDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksControllerFindAll(findTaskDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tasksControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksControllerFindOne(id, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tasksControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tasksControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateTaskDto} updateTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksControllerUpdate(id: number, updateTaskDto: UpdateTaskDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksControllerUpdate(id, updateTaskDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.tasksControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindAll(relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindOne(id, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetCurrentUser(relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetCurrentUser(relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersControllerGetCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdate(id: number, updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdate(id, updateUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {boolean} deleted 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUserCompanyList(id: number, relations: boolean, deleted: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUserCompanyList(id, relations, deleted, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersControllerUserCompanyList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUserCompanyRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCompany>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUserCompanyRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersControllerUserCompanyRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUserCompanyRestore(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCompany>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUserCompanyRestore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersControllerUserCompanyRestore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateWorkNormDto} createWorkNormDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workNormsControllerCreate(createWorkNormDto: CreateWorkNormDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkNorm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workNormsControllerCreate(createWorkNormDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.workNormsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workNormsControllerFindAll(relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkNorm>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workNormsControllerFindAll(relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.workNormsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workNormsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkNorm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workNormsControllerFindOne(id, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.workNormsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workNormsControllerRemove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkNorm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workNormsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.workNormsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateWorkNormDto} updateWorkNormDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workNormsControllerUpdate(id: number, updateWorkNormDto: UpdateWorkNormDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkNorm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workNormsControllerUpdate(id, updateWorkNormDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.workNormsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {AvailableAccessDto} availableAccessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerAvailable(availableAccessDto: AvailableAccessDto, options?: any): AxiosPromise<boolean> {
            return localVarFp.accessControllerAvailable(availableAccessDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AvailableAccessUserDto} availableAccessUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerAvailableForUser(availableAccessUserDto: AvailableAccessUserDto, options?: any): AxiosPromise<boolean> {
            return localVarFp.accessControllerAvailableForUser(availableAccessUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AvailableAccessUserCompanyDto} availableAccessUserCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerAvailableForUserCompany(availableAccessUserCompanyDto: AvailableAccessUserCompanyDto, options?: any): AxiosPromise<boolean> {
            return localVarFp.accessControllerAvailableForUserCompany(availableAccessUserCompanyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAccessDto} createAccessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerCreate(createAccessDto: CreateAccessDto, options?: any): AxiosPromise<object> {
            return localVarFp.accessControllerCreate(createAccessDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roleType 
         * @param {string} resourceType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerFindAll(roleType: string, resourceType: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.accessControllerFindAll(roleType, resourceType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerFindOne(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.accessControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerRemove(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.accessControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateAccessDto} updateAccessDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accessControllerUpdate(id: number, updateAccessDto: UpdateAccessDto, options?: any): AxiosPromise<object> {
            return localVarFp.accessControllerUpdate(id, updateAccessDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountingControllerFindAll(options?: any): AxiosPromise<Array<object>> {
            return localVarFp.accountingControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountingControllerFindOne(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.accountingControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerAddLocales(options?: any): AxiosPromise<void> {
            return localVarFp.appControllerAddLocales(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<string> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetLocales(options?: any): AxiosPromise<void> {
            return localVarFp.appControllerGetLocales(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetTitle(options?: any): AxiosPromise<string> {
            return localVarFp.appControllerGetTitle(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerDemo(options?: any): AxiosPromise<AuthDto> {
            return localVarFp.authControllerDemo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthDto} authDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(authDto: AuthDto, options?: any): AxiosPromise<TokensDto> {
            return localVarFp.authControllerLogin(authDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshTokens(options?: any): AxiosPromise<TokensDto> {
            return localVarFp.authControllerRefreshTokens(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(createUserDto: CreateUserDto, options?: any): AxiosPromise<TokensDto> {
            return localVarFp.authControllerRegister(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCompanyDto} createCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerCreate(createCompanyDto: CreateCompanyDto, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesControllerCreate(createCompanyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerFindAll(options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.companiesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerFindOne(id: number, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerRemove(id: number, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerSalaryCalculate(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.companiesControllerSalaryCalculate(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateCompanyDto} updateCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companiesControllerUpdate(id: number, updateCompanyDto: UpdateCompanyDto, options?: any): AxiosPromise<Company> {
            return localVarFp.companiesControllerUpdate(id, updateCompanyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateDepartmentDto} createDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsControllerCreate(createDepartmentDto: CreateDepartmentDto, options?: any): AxiosPromise<Department> {
            return localVarFp.departmentsControllerCreate(createDepartmentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} companyId 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsControllerFindAll(companyId: number, relations: boolean, options?: any): AxiosPromise<Array<Department>> {
            return localVarFp.departmentsControllerFindAll(companyId, relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsControllerFindOne(id: number, relations: boolean, options?: any): AxiosPromise<Department> {
            return localVarFp.departmentsControllerFindOne(id, relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsControllerRemove(id: number, options?: any): AxiosPromise<Department> {
            return localVarFp.departmentsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateDepartmentDto} updateDepartmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsControllerUpdate(id: number, updateDepartmentDto: UpdateDepartmentDto, options?: any): AxiosPromise<Department> {
            return localVarFp.departmentsControllerUpdate(id, updateDepartmentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerCreate(createJobDto: CreateJobDto, options?: any): AxiosPromise<Job> {
            return localVarFp.jobsControllerCreate(createJobDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindAll(options?: any): AxiosPromise<Array<Job>> {
            return localVarFp.jobsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerFindOne(id: number, options?: any): AxiosPromise<Job> {
            return localVarFp.jobsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerRemove(id: number, options?: any): AxiosPromise<Job> {
            return localVarFp.jobsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateJobDto} updateJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsControllerUpdate(id: number, updateJobDto: UpdateJobDto, options?: any): AxiosPromise<Job> {
            return localVarFp.jobsControllerUpdate(id, updateJobDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lawsControllerFindAll(options?: any): AxiosPromise<Array<object>> {
            return localVarFp.lawsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lawsControllerFindOne(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.lawsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minWageControllerFindAll(options?: any): AxiosPromise<Array<MinWage>> {
            return localVarFp.minWageControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minWageControllerFindOne(id: number, options?: any): AxiosPromise<MinWage> {
            return localVarFp.minWageControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minWageControllerRemove(id: number, options?: any): AxiosPromise<MinWage> {
            return localVarFp.minWageControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateMinWageDto} updateMinWageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minWageControllerUpdate(id: number, updateMinWageDto: UpdateMinWageDto, options?: any): AxiosPromise<MinWage> {
            return localVarFp.minWageControllerUpdate(id, updateMinWageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePayFundTypeDto} createPayFundTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundTypesControllerCreate(createPayFundTypeDto: CreatePayFundTypeDto, options?: any): AxiosPromise<PayFundType> {
            return localVarFp.payFundTypesControllerCreate(createPayFundTypeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundTypesControllerFindAll(options?: any): AxiosPromise<Array<PayFundType>> {
            return localVarFp.payFundTypesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundTypesControllerFindOne(id: number, options?: any): AxiosPromise<PayFundType> {
            return localVarFp.payFundTypesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundTypesControllerRemove(id: number, options?: any): AxiosPromise<PayFundType> {
            return localVarFp.payFundTypesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayFundTypeDto} updatePayFundTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundTypesControllerUpdate(id: number, updatePayFundTypeDto: UpdatePayFundTypeDto, options?: any): AxiosPromise<PayFundType> {
            return localVarFp.payFundTypesControllerUpdate(id, updatePayFundTypeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePayFundDto} createPayFundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundsControllerCreate(createPayFundDto: CreatePayFundDto, options?: any): AxiosPromise<PayFund> {
            return localVarFp.payFundsControllerCreate(createPayFundDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindPayFundDto} findPayFundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundsControllerFindAll(findPayFundDto: FindPayFundDto, options?: any): AxiosPromise<Array<PayFund>> {
            return localVarFp.payFundsControllerFindAll(findPayFundDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundsControllerFindOne(id: number, relations: boolean, options?: any): AxiosPromise<PayFund> {
            return localVarFp.payFundsControllerFindOne(id, relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundsControllerRemove(id: number, options?: any): AxiosPromise<PayFund> {
            return localVarFp.payFundsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayFundDto} updatePayFundDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payFundsControllerUpdate(id: number, updatePayFundDto: UpdatePayFundDto, options?: any): AxiosPromise<PayFund> {
            return localVarFp.payFundsControllerUpdate(id, updatePayFundDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerClose(id: number, options?: any): AxiosPromise<PayPeriod> {
            return localVarFp.payPeriodsControllerClose(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePayPeriodDto} createPayPeriodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerCreate(createPayPeriodDto: CreatePayPeriodDto, options?: any): AxiosPromise<PayPeriod> {
            return localVarFp.payPeriodsControllerCreate(createPayPeriodDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} companyId 
         * @param {boolean} relations 
         * @param {boolean} fullFieldList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerFindAll(companyId: number, relations: boolean, fullFieldList: boolean, options?: any): AxiosPromise<Array<PayPeriod>> {
            return localVarFp.payPeriodsControllerFindAll(companyId, relations, fullFieldList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} companyId 
         * @param {boolean} relations 
         * @param {boolean} fullFieldList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerFindCurrent(companyId: number, relations: boolean, fullFieldList: boolean, options?: any): AxiosPromise<PayPeriod> {
            return localVarFp.payPeriodsControllerFindCurrent(companyId, relations, fullFieldList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {boolean} fullFieldList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerFindOne(id: number, relations: boolean, fullFieldList: boolean, options?: any): AxiosPromise<PayPeriod> {
            return localVarFp.payPeriodsControllerFindOne(id, relations, fullFieldList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerOpen(id: number, options?: any): AxiosPromise<PayPeriod> {
            return localVarFp.payPeriodsControllerOpen(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerRemove(id: number, options?: any): AxiosPromise<PayPeriod> {
            return localVarFp.payPeriodsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayPeriodDto} updatePayPeriodDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payPeriodsControllerUpdate(id: number, updatePayPeriodDto: UpdatePayPeriodDto, options?: any): AxiosPromise<PayPeriod> {
            return localVarFp.payPeriodsControllerUpdate(id, updatePayPeriodDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePaymentPositionDto} createPaymentPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPositionsControllerCreate(createPaymentPositionDto: CreatePaymentPositionDto, options?: any): AxiosPromise<PaymentPosition> {
            return localVarFp.paymentPositionsControllerCreate(createPaymentPositionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindPaymentPositionDto} findPaymentPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPositionsControllerFindAll(findPaymentPositionDto: FindPaymentPositionDto, options?: any): AxiosPromise<Array<PaymentPosition>> {
            return localVarFp.paymentPositionsControllerFindAll(findPaymentPositionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPositionsControllerFindOne(id: number, relations: boolean, options?: any): AxiosPromise<PaymentPosition> {
            return localVarFp.paymentPositionsControllerFindOne(id, relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPositionsControllerRemove(id: number, options?: any): AxiosPromise<PaymentPosition> {
            return localVarFp.paymentPositionsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePaymentPositionDto} updatePaymentPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentPositionsControllerUpdate(id: number, updatePaymentPositionDto: UpdatePaymentPositionDto, options?: any): AxiosPromise<PaymentPosition> {
            return localVarFp.paymentPositionsControllerUpdate(id, updatePaymentPositionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePaymentTypeDto} createPaymentTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentTypesControllerCreate(createPaymentTypeDto: CreatePaymentTypeDto, options?: any): AxiosPromise<PaymentType> {
            return localVarFp.paymentTypesControllerCreate(createPaymentTypeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} part 
         * @param {string} groups 
         * @param {string} methods 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentTypesControllerFindAll(part: string, groups: string, methods: string, ids: string, options?: any): AxiosPromise<Array<PaymentType>> {
            return localVarFp.paymentTypesControllerFindAll(part, groups, methods, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentTypesControllerFindOne(id: number, options?: any): AxiosPromise<PaymentType> {
            return localVarFp.paymentTypesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentTypesControllerRemove(id: number, options?: any): AxiosPromise<PaymentType> {
            return localVarFp.paymentTypesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePaymentTypeDto} updatePaymentTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentTypesControllerUpdate(id: number, updatePaymentTypeDto: UpdatePaymentTypeDto, options?: any): AxiosPromise<PaymentType> {
            return localVarFp.paymentTypesControllerUpdate(id, updatePaymentTypeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePaymentDto} createPaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerCreate(createPaymentDto: CreatePaymentDto, options?: any): AxiosPromise<Payment> {
            return localVarFp.paymentsControllerCreate(createPaymentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindPaymentDto} findPaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerFindAll(findPaymentDto: FindPaymentDto, options?: any): AxiosPromise<Array<Payment>> {
            return localVarFp.paymentsControllerFindAll(findPaymentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerFindOne(id: number, relations: boolean, options?: any): AxiosPromise<Payment> {
            return localVarFp.paymentsControllerFindOne(id, relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerProcess(id: number, options?: any): AxiosPromise<Payment> {
            return localVarFp.paymentsControllerProcess(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerRemove(id: number, options?: any): AxiosPromise<Payment> {
            return localVarFp.paymentsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePaymentDto} updatePaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerUpdate(id: number, updatePaymentDto: UpdatePaymentDto, options?: any): AxiosPromise<Payment> {
            return localVarFp.paymentsControllerUpdate(id, updatePaymentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsControllerWithdraw(id: number, options?: any): AxiosPromise<Payment> {
            return localVarFp.paymentsControllerWithdraw(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePayrollDto} createPayrollDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollsControllerCreate(createPayrollDto: CreatePayrollDto, options?: any): AxiosPromise<Payroll> {
            return localVarFp.payrollsControllerCreate(createPayrollDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindPayrollDto} findPayrollDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollsControllerFindAll(findPayrollDto: FindPayrollDto, options?: any): AxiosPromise<Array<Payroll>> {
            return localVarFp.payrollsControllerFindAll(findPayrollDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollsControllerFindOne(id: number, relations: boolean, options?: any): AxiosPromise<Payroll> {
            return localVarFp.payrollsControllerFindOne(id, relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollsControllerRemove(id: number, options?: any): AxiosPromise<Payroll> {
            return localVarFp.payrollsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePayrollDto} updatePayrollDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payrollsControllerUpdate(id: number, updatePayrollDto: UpdatePayrollDto, options?: any): AxiosPromise<Payroll> {
            return localVarFp.payrollsControllerUpdate(id, updatePayrollDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePersonDto} createPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerCreate(createPersonDto: CreatePersonDto, options?: any): AxiosPromise<object> {
            return localVarFp.personsControllerCreate(createPersonDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindPersonDto} findPersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerFind(findPersonDto: FindPersonDto, options?: any): AxiosPromise<object> {
            return localVarFp.personsControllerFind(findPersonDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerFindAll(options?: any): AxiosPromise<Array<object>> {
            return localVarFp.personsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerFindOne(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.personsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerRemove(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.personsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePersonDto} updatePersonDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personsControllerUpdate(id: number, updatePersonDto: UpdatePersonDto, options?: any): AxiosPromise<object> {
            return localVarFp.personsControllerUpdate(id, updatePersonDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePositionHistoryDto} createPositionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerCreate(createPositionHistoryDto: CreatePositionHistoryDto, options?: any): AxiosPromise<object> {
            return localVarFp.positionHistoryControllerCreate(createPositionHistoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} positionId 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerFindAll(positionId: number, relations: boolean, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.positionHistoryControllerFindAll(positionId, relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindPositionHistoryDto} findPositionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerFindLast(findPositionHistoryDto: FindPositionHistoryDto, options?: any): AxiosPromise<object> {
            return localVarFp.positionHistoryControllerFindLast(findPositionHistoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerFindOne(id: number, relations: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.positionHistoryControllerFindOne(id, relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerRemove(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.positionHistoryControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePositionHistoryDto} updatePositionHistoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionHistoryControllerUpdate(id: number, updatePositionHistoryDto: UpdatePositionHistoryDto, options?: any): AxiosPromise<object> {
            return localVarFp.positionHistoryControllerUpdate(id, updatePositionHistoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePositionDto} createPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerCreate(createPositionDto: CreatePositionDto, options?: any): AxiosPromise<object> {
            return localVarFp.positionsControllerCreate(createPositionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindPositionDto} findPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerFindAll(findPositionDto: FindPositionDto, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.positionsControllerFindAll(findPositionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindAllPositionBalanceDto} findAllPositionBalanceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerFindBalance(findAllPositionBalanceDto: FindAllPositionBalanceDto, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.positionsControllerFindBalance(findAllPositionBalanceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {string} onDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerFindFirstByPersonId(id: number, relations: boolean, onDate: string, options?: any): AxiosPromise<object> {
            return localVarFp.positionsControllerFindFirstByPersonId(id, relations, onDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {string} onDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerFindOne(id: number, relations: boolean, onDate: string, options?: any): AxiosPromise<object> {
            return localVarFp.positionsControllerFindOne(id, relations, onDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerRemove(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.positionsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdatePositionDto} updatePositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsControllerUpdate(id: number, updatePositionDto: UpdatePositionDto, options?: any): AxiosPromise<object> {
            return localVarFp.positionsControllerUpdate(id, updatePositionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateRoleDto} createRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreate(createRoleDto: CreateRoleDto, options?: any): AxiosPromise<object> {
            return localVarFp.rolesControllerCreate(createRoleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindAll(options?: any): AxiosPromise<Array<object>> {
            return localVarFp.rolesControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerFindOne(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.rolesControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerRemove(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.rolesControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateRoleDto} updateRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdate(id: number, updateRoleDto: UpdateRoleDto, options?: any): AxiosPromise<object> {
            return localVarFp.rolesControllerUpdate(id, updateRoleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} companyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sseControllerGetCompanyStream(companyId: number, options?: any): AxiosPromise<object> {
            return localVarFp.sseControllerGetCompanyStream(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTaskDto} createTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksControllerCreate(createTaskDto: CreateTaskDto, options?: any): AxiosPromise<Task> {
            return localVarFp.tasksControllerCreate(createTaskDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FindTaskDto} findTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksControllerFindAll(findTaskDto: FindTaskDto, options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.tasksControllerFindAll(findTaskDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksControllerFindOne(id: number, relations: boolean, options?: any): AxiosPromise<Task> {
            return localVarFp.tasksControllerFindOne(id, relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksControllerRemove(id: number, options?: any): AxiosPromise<Task> {
            return localVarFp.tasksControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateTaskDto} updateTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksControllerUpdate(id: number, updateTaskDto: UpdateTaskDto, options?: any): AxiosPromise<Task> {
            return localVarFp.tasksControllerUpdate(id, updateTaskDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(createUserDto: CreateUserDto, options?: any): AxiosPromise<object> {
            return localVarFp.usersControllerCreate(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(relations: boolean, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.usersControllerFindAll(relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id: number, relations: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.usersControllerFindOne(id, relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetCurrentUser(relations: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.usersControllerGetCurrentUser(relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.usersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(id: number, updateUserDto: UpdateUserDto, options?: any): AxiosPromise<object> {
            return localVarFp.usersControllerUpdate(id, updateUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {boolean} deleted 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserCompanyList(id: number, relations: boolean, deleted: boolean, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.usersControllerUserCompanyList(id, relations, deleted, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserCompanyRemove(id: number, options?: any): AxiosPromise<UserCompany> {
            return localVarFp.usersControllerUserCompanyRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserCompanyRestore(id: number, options?: any): AxiosPromise<UserCompany> {
            return localVarFp.usersControllerUserCompanyRestore(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateWorkNormDto} createWorkNormDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workNormsControllerCreate(createWorkNormDto: CreateWorkNormDto, options?: any): AxiosPromise<WorkNorm> {
            return localVarFp.workNormsControllerCreate(createWorkNormDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workNormsControllerFindAll(relations: boolean, options?: any): AxiosPromise<Array<WorkNorm>> {
            return localVarFp.workNormsControllerFindAll(relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} relations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workNormsControllerFindOne(id: number, relations: boolean, options?: any): AxiosPromise<WorkNorm> {
            return localVarFp.workNormsControllerFindOne(id, relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workNormsControllerRemove(id: number, options?: any): AxiosPromise<WorkNorm> {
            return localVarFp.workNormsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateWorkNormDto} updateWorkNormDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workNormsControllerUpdate(id: number, updateWorkNormDto: UpdateWorkNormDto, options?: any): AxiosPromise<WorkNorm> {
            return localVarFp.workNormsControllerUpdate(id, updateWorkNormDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {AvailableAccessDto} availableAccessDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessControllerAvailable(availableAccessDto: AvailableAccessDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessControllerAvailable(availableAccessDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AvailableAccessUserDto} availableAccessUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessControllerAvailableForUser(availableAccessUserDto: AvailableAccessUserDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessControllerAvailableForUser(availableAccessUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AvailableAccessUserCompanyDto} availableAccessUserCompanyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessControllerAvailableForUserCompany(availableAccessUserCompanyDto: AvailableAccessUserCompanyDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessControllerAvailableForUserCompany(availableAccessUserCompanyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateAccessDto} createAccessDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessControllerCreate(createAccessDto: CreateAccessDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessControllerCreate(createAccessDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roleType 
     * @param {string} resourceType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessControllerFindAll(roleType: string, resourceType: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessControllerFindAll(roleType, resourceType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateAccessDto} updateAccessDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accessControllerUpdate(id: number, updateAccessDto: UpdateAccessDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accessControllerUpdate(id, updateAccessDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountingControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accountingControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountingControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accountingControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerAddLocales(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerAddLocales(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetLocales(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetLocales(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetTitle(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetTitle(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerDemo(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerDemo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthDto} authDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerLogin(authDto: AuthDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerLogin(authDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerLogout(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerRefreshTokens(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerRefreshTokens(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authControllerRegister(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authControllerRegister(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCompanyDto} createCompanyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companiesControllerCreate(createCompanyDto: CreateCompanyDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).companiesControllerCreate(createCompanyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companiesControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).companiesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companiesControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).companiesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companiesControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).companiesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companiesControllerSalaryCalculate(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).companiesControllerSalaryCalculate(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateCompanyDto} updateCompanyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public companiesControllerUpdate(id: number, updateCompanyDto: UpdateCompanyDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).companiesControllerUpdate(id, updateCompanyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateDepartmentDto} createDepartmentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public departmentsControllerCreate(createDepartmentDto: CreateDepartmentDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).departmentsControllerCreate(createDepartmentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} companyId 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public departmentsControllerFindAll(companyId: number, relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).departmentsControllerFindAll(companyId, relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public departmentsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).departmentsControllerFindOne(id, relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public departmentsControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).departmentsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateDepartmentDto} updateDepartmentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public departmentsControllerUpdate(id: number, updateDepartmentDto: UpdateDepartmentDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).departmentsControllerUpdate(id, updateDepartmentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateJobDto} createJobDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public jobsControllerCreate(createJobDto: CreateJobDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).jobsControllerCreate(createJobDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public jobsControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).jobsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public jobsControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).jobsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public jobsControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).jobsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateJobDto} updateJobDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public jobsControllerUpdate(id: number, updateJobDto: UpdateJobDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).jobsControllerUpdate(id, updateJobDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public lawsControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).lawsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public lawsControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).lawsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public minWageControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).minWageControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public minWageControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).minWageControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public minWageControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).minWageControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateMinWageDto} updateMinWageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public minWageControllerUpdate(id: number, updateMinWageDto: UpdateMinWageDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).minWageControllerUpdate(id, updateMinWageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePayFundTypeDto} createPayFundTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payFundTypesControllerCreate(createPayFundTypeDto: CreatePayFundTypeDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payFundTypesControllerCreate(createPayFundTypeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payFundTypesControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payFundTypesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payFundTypesControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payFundTypesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payFundTypesControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payFundTypesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdatePayFundTypeDto} updatePayFundTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payFundTypesControllerUpdate(id: number, updatePayFundTypeDto: UpdatePayFundTypeDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payFundTypesControllerUpdate(id, updatePayFundTypeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePayFundDto} createPayFundDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payFundsControllerCreate(createPayFundDto: CreatePayFundDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payFundsControllerCreate(createPayFundDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindPayFundDto} findPayFundDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payFundsControllerFindAll(findPayFundDto: FindPayFundDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payFundsControllerFindAll(findPayFundDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payFundsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payFundsControllerFindOne(id, relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payFundsControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payFundsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdatePayFundDto} updatePayFundDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payFundsControllerUpdate(id: number, updatePayFundDto: UpdatePayFundDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payFundsControllerUpdate(id, updatePayFundDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payPeriodsControllerClose(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payPeriodsControllerClose(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePayPeriodDto} createPayPeriodDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payPeriodsControllerCreate(createPayPeriodDto: CreatePayPeriodDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payPeriodsControllerCreate(createPayPeriodDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} companyId 
     * @param {boolean} relations 
     * @param {boolean} fullFieldList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payPeriodsControllerFindAll(companyId: number, relations: boolean, fullFieldList: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payPeriodsControllerFindAll(companyId, relations, fullFieldList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} companyId 
     * @param {boolean} relations 
     * @param {boolean} fullFieldList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payPeriodsControllerFindCurrent(companyId: number, relations: boolean, fullFieldList: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payPeriodsControllerFindCurrent(companyId, relations, fullFieldList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {boolean} fullFieldList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payPeriodsControllerFindOne(id: number, relations: boolean, fullFieldList: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payPeriodsControllerFindOne(id, relations, fullFieldList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payPeriodsControllerOpen(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payPeriodsControllerOpen(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payPeriodsControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payPeriodsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdatePayPeriodDto} updatePayPeriodDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payPeriodsControllerUpdate(id: number, updatePayPeriodDto: UpdatePayPeriodDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payPeriodsControllerUpdate(id, updatePayPeriodDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePaymentPositionDto} createPaymentPositionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentPositionsControllerCreate(createPaymentPositionDto: CreatePaymentPositionDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentPositionsControllerCreate(createPaymentPositionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindPaymentPositionDto} findPaymentPositionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentPositionsControllerFindAll(findPaymentPositionDto: FindPaymentPositionDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentPositionsControllerFindAll(findPaymentPositionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentPositionsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentPositionsControllerFindOne(id, relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentPositionsControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentPositionsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdatePaymentPositionDto} updatePaymentPositionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentPositionsControllerUpdate(id: number, updatePaymentPositionDto: UpdatePaymentPositionDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentPositionsControllerUpdate(id, updatePaymentPositionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePaymentTypeDto} createPaymentTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentTypesControllerCreate(createPaymentTypeDto: CreatePaymentTypeDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentTypesControllerCreate(createPaymentTypeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} part 
     * @param {string} groups 
     * @param {string} methods 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentTypesControllerFindAll(part: string, groups: string, methods: string, ids: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentTypesControllerFindAll(part, groups, methods, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentTypesControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentTypesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentTypesControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentTypesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdatePaymentTypeDto} updatePaymentTypeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentTypesControllerUpdate(id: number, updatePaymentTypeDto: UpdatePaymentTypeDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentTypesControllerUpdate(id, updatePaymentTypeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePaymentDto} createPaymentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentsControllerCreate(createPaymentDto: CreatePaymentDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentsControllerCreate(createPaymentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindPaymentDto} findPaymentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentsControllerFindAll(findPaymentDto: FindPaymentDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentsControllerFindAll(findPaymentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentsControllerFindOne(id, relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentsControllerProcess(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentsControllerProcess(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentsControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdatePaymentDto} updatePaymentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentsControllerUpdate(id: number, updatePaymentDto: UpdatePaymentDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentsControllerUpdate(id, updatePaymentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public paymentsControllerWithdraw(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).paymentsControllerWithdraw(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePayrollDto} createPayrollDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payrollsControllerCreate(createPayrollDto: CreatePayrollDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payrollsControllerCreate(createPayrollDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindPayrollDto} findPayrollDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payrollsControllerFindAll(findPayrollDto: FindPayrollDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payrollsControllerFindAll(findPayrollDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payrollsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payrollsControllerFindOne(id, relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payrollsControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payrollsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdatePayrollDto} updatePayrollDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payrollsControllerUpdate(id: number, updatePayrollDto: UpdatePayrollDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payrollsControllerUpdate(id, updatePayrollDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePersonDto} createPersonDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public personsControllerCreate(createPersonDto: CreatePersonDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).personsControllerCreate(createPersonDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindPersonDto} findPersonDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public personsControllerFind(findPersonDto: FindPersonDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).personsControllerFind(findPersonDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public personsControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).personsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public personsControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).personsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public personsControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).personsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdatePersonDto} updatePersonDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public personsControllerUpdate(id: number, updatePersonDto: UpdatePersonDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).personsControllerUpdate(id, updatePersonDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePositionHistoryDto} createPositionHistoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionHistoryControllerCreate(createPositionHistoryDto: CreatePositionHistoryDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionHistoryControllerCreate(createPositionHistoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} positionId 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionHistoryControllerFindAll(positionId: number, relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionHistoryControllerFindAll(positionId, relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindPositionHistoryDto} findPositionHistoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionHistoryControllerFindLast(findPositionHistoryDto: FindPositionHistoryDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionHistoryControllerFindLast(findPositionHistoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionHistoryControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionHistoryControllerFindOne(id, relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionHistoryControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionHistoryControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdatePositionHistoryDto} updatePositionHistoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionHistoryControllerUpdate(id: number, updatePositionHistoryDto: UpdatePositionHistoryDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionHistoryControllerUpdate(id, updatePositionHistoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePositionDto} createPositionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionsControllerCreate(createPositionDto: CreatePositionDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionsControllerCreate(createPositionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindPositionDto} findPositionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionsControllerFindAll(findPositionDto: FindPositionDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionsControllerFindAll(findPositionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindAllPositionBalanceDto} findAllPositionBalanceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionsControllerFindBalance(findAllPositionBalanceDto: FindAllPositionBalanceDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionsControllerFindBalance(findAllPositionBalanceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {string} onDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionsControllerFindFirstByPersonId(id: number, relations: boolean, onDate: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionsControllerFindFirstByPersonId(id, relations, onDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {string} onDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionsControllerFindOne(id: number, relations: boolean, onDate: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionsControllerFindOne(id, relations, onDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionsControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdatePositionDto} updatePositionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public positionsControllerUpdate(id: number, updatePositionDto: UpdatePositionDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).positionsControllerUpdate(id, updatePositionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateRoleDto} createRoleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolesControllerCreate(createRoleDto: CreateRoleDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rolesControllerCreate(createRoleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolesControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rolesControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolesControllerFindOne(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rolesControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolesControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rolesControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateRoleDto} updateRoleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolesControllerUpdate(id: number, updateRoleDto: UpdateRoleDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rolesControllerUpdate(id, updateRoleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} companyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sseControllerGetCompanyStream(companyId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sseControllerGetCompanyStream(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTaskDto} createTaskDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksControllerCreate(createTaskDto: CreateTaskDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksControllerCreate(createTaskDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FindTaskDto} findTaskDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksControllerFindAll(findTaskDto: FindTaskDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksControllerFindAll(findTaskDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksControllerFindOne(id, relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateTaskDto} updateTaskDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksControllerUpdate(id: number, updateTaskDto: UpdateTaskDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksControllerUpdate(id, updateTaskDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerCreate(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerFindAll(relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerFindAll(relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerFindOne(id, relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerGetCurrentUser(relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerGetCurrentUser(relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerUpdate(id: number, updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerUpdate(id, updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {boolean} deleted 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerUserCompanyList(id: number, relations: boolean, deleted: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerUserCompanyList(id, relations, deleted, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerUserCompanyRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerUserCompanyRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersControllerUserCompanyRestore(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersControllerUserCompanyRestore(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateWorkNormDto} createWorkNormDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public workNormsControllerCreate(createWorkNormDto: CreateWorkNormDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).workNormsControllerCreate(createWorkNormDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public workNormsControllerFindAll(relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).workNormsControllerFindAll(relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {boolean} relations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public workNormsControllerFindOne(id: number, relations: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).workNormsControllerFindOne(id, relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public workNormsControllerRemove(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).workNormsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateWorkNormDto} updateWorkNormDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public workNormsControllerUpdate(id: number, updateWorkNormDto: UpdateWorkNormDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).workNormsControllerUpdate(id, updateWorkNormDto, options).then((request) => request(this.axios, this.basePath));
    }
}



